{"pages":[{"title":"404","text":"","link":"/404.html"}],"posts":[{"title":"Docker概念梳理","text":"Docker好处: 一致的运行环境 Docker 的镜像提供了==除内核外==完整的运行时环境，确保了应用运行环境一致性. 更快速的启动时间 可以做到秒级、甚至毫秒级的启动时间。 隔离性 避免公用的服务器，资源会容易受到其他用户的影响. 弹性伸缩，快速扩展 善于处理集中爆发的服务器使用压力. 迁移方便 可以很轻易的将在一个平台上运行的应用，迁移到另一个平台上，而不用担心运行环境的变化导致应用无法正常运行的情况。 持续交付和部署 使用 Docker 可以通过定制应用镜像来实现持续集成、持续交付、部署。 Docker基本概念 仓库（Repository） 镜像（Image） 容器（Container） Dockerfile（Dockerfile） Docker Compose（Docker Compose） 仓库集中存放镜像文件的地方。比如：DockerHub 镜像一个特殊的文件系统，除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数（如匿名卷、环境变量、用户等）。 镜像不包含任何动态数据，其内容在构建之后也不会被改变。 镜像构建时，会一层层构建，前一层是后一层的基础。每一层构建完就不会再发生改变，后一层上的任何改变只发生在自己这一层。 有基础镜像，仅仅包含操作系统，比如centos镜像；有中间件镜像，比如redis等数据库镜像；最后是应用镜像，就是指具体的应用服务了，应用镜像可以非常丰富，随时可以发布，这三者之间依次叠加。 容器镜像（Image）和容器（Container）的关系，就像是面向对象程序设计中的 类 和 实例 一样，镜像是静态的定义，容器是镜像运行时的实体。 容器存储层的生存周期和容器一样，容器消亡时，容器存储层也随之消亡。因此，任何保存于容器存储层的信息都会随容器删除而丢失。 容器不应该向其存储层内写入任何数据，容器存储层要保持无状态化。所有的文件写入操作，都应该使用数据卷（Volume）、或者绑定宿主目录，在这些位置的读写会跳过容器存储层，直接对宿主(或网络存储)发生读写，其性能和稳定性更高。数据卷的生存周期独立于容器，容器消亡，数据卷不会消亡。因此，使用数据卷后，容器可以随意删除、重新 run ，数据却不会丢失。 打个比方，你首先下载了一个Ubuntu的镜像，然后又安装mysql和Django应用及其依赖，来完成对它Ubutun镜像的修改，一个个人觉得非常完美应用镜像生成了！就把这个镜像分享给大家使用，大家通过这个镜像就生成一个容器。容器启动之后就会运行Django服务了。](https://imgchr.com/i/YeTFv4 容器就是一个个独立的封闭的集装箱，但是也需要对外提供服务的，所以Docker允许公开容器的特定端口，在启动Docker的时候，我们就可以将容器的特定端口映射到宿主机上面的任意一个端口，所以，如果几个服务都需要80端口，那么容器的对外端口是80，但是映射到宿主机上面就是任意端口，就不会产生冲突，所以就不需要通过代理来解决冲突。容器对外端口与宿主机的端口映射可以通过下面的命令来完成。 12345docker run -d -p 8081:80 --name 容器名 镜像名 -d 守护容器，就是后台运行，退出命令窗口容器也不会停止 -it 交互式容器 退出命令窗口容器就停止运行了 -p 宿主机端口和容器端口映射 Dockerfile一个文本文件，用来配置 image。 12345678910# DockerfileFROM ubuntu:16.04RUN apt-get updateRUN apt-get install -y vim# 告诉Docker默认启动命令CMD[\"sh\"] Docker ComposeCompose 是用于定义和运行多容器 Docker 应用程序的工具。通过 Compose，您可以使用 YML 文件来配置应用程序需要的所有服务。然后，使用一个命令，就可以从 YML 文件配置中创建并启动所有服务。 docker-compose是编排容器的。例如，你有一个php镜像，一个mysql镜像，一个nginx镜像。如果没有docker-compose，那么每次启动的时候，你需要敲各个容器的启动参数，环境变量，容器命名，指定不同容器的链接参数等等一系列的操作，相当繁琐。而用了docker-composer之后，你就可以把这些命令一次性写在docker-composer.yml文件中，以后每次启动这一整个环境（含3个容器）的时候，你只要敲一个docker-composer up命令就ok了 Compose 使用的三个步骤： 使用 Dockerfile 定义应用程序的环境。 使用 docker-compose.yml 定义构成应用程序的服务，这样它们可以在隔离环境中一起运行。 最后，执行 docker-compose up 命令来启动并运行整个应用程序。 12345678910111213141516# yaml 配置实例version: '3'services: web: build: . ports: - \"5000:5000\" volumes: - .:/code - logvolume01:/var/log links: - redis redis: image: redisvolumes: logvolume01: {}","link":"/2020/05/07/Docker%E6%A6%82%E5%BF%B5%E6%A2%B3%E7%90%86/"},{"title":"Workaround for oracle weblogic install error —— Cyclic dependency detected among featureset libraries","text":"BriefThis is the workaround for resolving errors during weblogic installation, below are details and resolving steps. 1. Problem descriptionWhen installing weblogic 12.2.1.4, we may facing the problem during progress ‘Generating Libraries’. The error message is java.lang.Exception: oracle.sysman.oii.oiif.oiifb.OiifbEndIterateException:com.oracle.cie.gdr.libraries.LibraryHandlerException:Cyclic dependency detected among featureset libraries:[C:\\Oracle\\Middleware\\Oracle_Home\\server\\lib\\wljmsclient.jar,C:\\Oracle\\Middleware\\Oracle_Home\\server\\lib\\wljmxclient.jar] 2. Resolving steps This workaround is a Trick to skip Cyclic dependency check for ‘wljmsclient.jar’ and ‘wljmxclient.jar’, after the installation completed, add back these two libraries. Go to the install package folder. Unzip the jar file. Using command line to retrieve string ‘wljmsclient.jar’, ‘wljmxclient.jar’ under the extract folder to get details about this two libraries.123findstr /s /i /n \"wljmsclient.jar\" *.*findstr /s /i /n \"wljmxclient.jar\" *.* We can find out that the libraries are referenced in wls_sharedLibraries_12.2.1.4.0.xml under folder ~\\Disk1\\stage\\featuresets Go to folder ~\\Disk1\\stage\\featuresets and find file wls_sharedLibraries_12.2.1.4.0.xml Open the file wls_sharedLibraries_12.2.1.4.0.xml and find lines for libraries ‘wljmsclient.jar’, ‘wljmxclient.jar’. Commented out these lines in xml and save the xml. Go back to folder ~\\Disk1\\install, run the .ng.cmd script as administrator The installation cmd is running The weblogic installer will be launched and follow the installation steps. Installation completed successfully. Go to the target folder, find wls_sharedLibraries_12.2.1.4.0.xml under ~/Oracle/Middleware/Oracle_Home/inventory/featuresets Open wls_sharedLibraries_12.2.1.4.0.xml and we can find out that libraries info for ‘wljmsclient.jar’, ‘wljmxclient.jar’ are not there (Because we commnet out the code when installation). Add these info back. Go to ~/Oracle/Middleware/Oracle_Home/wlserver/server/lib Compared with successfully installed case, we can know that libraries ‘wlclient.jar’ and ‘wljmxclient.jar’ are missing due to the comment out code. Add these two libraries back to folder. I copied these two libraries from a successfully installed case, because I installed weblogic in several machines and only some of them have this Cyclic dependency check problem, if you don’t have these two libraries in your hands, you can get them from internet. http://find-files.com/ Done.","link":"/2020/02/03/Workaround%20for%20oracle%20weblogic%20install%20error/"},{"title":"Hexo + GitPages Blog Tutorial(教程)","text":"BriefThis tutorial is for building free static blogs by using Hexo and Github Pages. We will start at environments set up, customise blog pages, add source project in version control and install plugins for futher features like comments. What is HexoHexo is a fast, simple and powerful blog framework. You write posts in Markdown (or other markup languages) and Hexo generates static files with a beautiful theme in seconds. What is Github PagesGitHub Pages is a static web hosting service offered by GitHub since 2008 to GitHub users for hosting user blogs, project documentation, or even whole books created as a page. InstallationIt only takes less than one hour to set up enviroments and get your first blog page deployed. If you encounter a problem, please refer https://hexo.io/docs/ Requirements Git Node.js If your computer already has these, congratulations! You can skip to the install Hexo step. Install Git Windows: Download & install git. Mac: Install it with Homebrew, MacPorts or installer. Linux (Ubuntu, Debian):1sudo apt-get install git-core Linux (Fedora, Red Hat, CentOS):1sudo yum install git-core Run CMD check git was installed successfully: git --version Generate SSH Key for GithubRun git bash from Menu Config your git global settings: 12git config --global user.name \"your GitHub username\"git config --global user.email \"your GitHub regist email\" Generate ssh key: 1ssh-keygen -t rsa -C \"your GitHub regist email\" Press ‘Enter’ three times, no need password by default, find id_rsa.pub key in generated .ssh folder, copy the whole content in this file. Go to github setting keys page, click New SSH Key Title can be any value, copy the content of id_rsa.pub into Key, then click Add SSH Key. Go to git bash, use command ssh git@github.com to verify the key is successfully configured: Install Node.jsNode.js Official Installer WindowsIf you use the official installer, make sure Add to PATH is checked (it’s checked by default). Mac / LinuxIf you encounter EACCES permission error when trying to install Hexo, please follow the workaround provided by npmjs; overriding with root/sudo is highly discouraged. Run CMD check node.js was installed successfully: node -v npm will be installed by default when installing node.js, if not, please install npm also. Run CMD check npm was installed successfully: npm -v Install HexoOnce all the requirements are installed, you can start to install Hexo. Create a folder in your local PC, we will install Hexo frame in this folder and the blog pages will also be published in this folder. Shift + right click in folder. Open command window here. 3.Use npm command to install Hexo: 1npm install -g hexo-cli Init Blog FilesAfter the installation finished. Use following command in same folder to init blog: 1hexo init blog Using following commands to verify the generated blog files 12345hexo new test_my_sitehexo ghexo s The blog will run on local server, we can preview it on browser http://localhost:4000 Create Github RepositoryWe need to create one Github Pages repository for deploying blog web files. Login github, create a new repository, The ==== in repository name must be exactly same as highlighted your login name: When the repository is created, go to repository settings: Scroll down the page, config source branch abd choose a theme: By click the provided link, you can view your github pages in browser. Deploy blog to Github PagesOpen the _config.yml file under your blog root folder, update the deploy config as follow: 1234deploy: type: git repository: https://github.com/username/username.github.io.git branch: master Run CMD in this folder, using npm command to install deployment plugins: 1npm install hexo-deployer-git --save Then using following three hexo commands to deploy your blog on your github pages: 123hexo clean hexo g hexo d Finally, your can access your blog by url: 1username.github.io","link":"/2019/12/19/Hexo-GitPages-Blog-Tutorial-%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"Docker","slug":"Docker","link":"/tags/Docker/"},{"name":"Weblogic","slug":"Weblogic","link":"/tags/Weblogic/"},{"name":"Hexo","slug":"Hexo","link":"/tags/Hexo/"}],"categories":[{"name":"workaround","slug":"workaround","link":"/categories/workaround/"}]}