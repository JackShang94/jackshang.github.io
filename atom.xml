<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jack Shang&#39;s Zone</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2021-11-19T14:56:35.723Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Jack Shang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>0.1.数据类型</title>
    <link href="http://yoursite.com/2021/11/19/0-1-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <id>http://yoursite.com/2021/11/19/0-1-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</id>
    <published>2021-11-19T14:37:39.000Z</published>
    <updated>2021-11-19T14:56:35.723Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java数据类型总结：基本类型、引用类型"><a href="#Java数据类型总结：基本类型、引用类型" class="headerlink" title="Java数据类型总结：基本类型、引用类型"></a>Java数据类型总结：基本类型、引用类型</h1><h2 id="一、数据类型"><a href="#一、数据类型" class="headerlink" title="一、数据类型"></a>一、数据类型</h2><h3 id="1、基本数据类型"><a href="#1、基本数据类型" class="headerlink" title="1、基本数据类型"></a>1、基本数据类型</h3><p>基本数据类型只有8种，可按照如下分类</p><p>①整数类型：long、int、short、byte </p><p>②浮点类型：float、double </p><p>③字符类型：char </p><p>④布尔类型：boolean</p><table><thead><tr><th align="left">No.</th><th align="left">数据类型</th><th align="left">大小/位</th><th align="left">可表示数据范围</th><th align="right">默认值</th></tr></thead><tbody><tr><td align="left">1</td><td align="left">byte（字节型）</td><td align="left">8</td><td align="left">-128~127</td><td align="right">0</td></tr><tr><td align="left">2</td><td align="left">short（短整型）</td><td align="left">16</td><td align="left">-32768~32767</td><td align="right">0</td></tr><tr><td align="left">3</td><td align="left">int（整型）</td><td align="left">32</td><td align="left">-2147483648~2147483647</td><td align="right">0</td></tr><tr><td align="left">4</td><td align="left">long（长整型）</td><td align="left">64</td><td align="left">-9223372036854775808~9223372036854775807</td><td align="right">0</td></tr><tr><td align="left">5</td><td align="left">float（单精度）</td><td align="left">32</td><td align="left">-3.4E38~3.4E38</td><td align="right">0.0</td></tr><tr><td align="left">6</td><td align="left">double（双精度）</td><td align="left">64</td><td align="left">-1.7E308~1.7E308</td><td align="right">0.0</td></tr><tr><td align="left">7</td><td align="left">char（字符）</td><td align="left">16</td><td align="left">0~255</td><td align="right">‘\u0000’</td></tr><tr><td align="left">8</td><td align="left">boolean（布尔）</td><td align="left">-</td><td align="left">true或false</td><td align="right">false</td></tr></tbody></table><p>基本类型对应的包装类表如下：</p><table><thead><tr><th align="left">基本类型</th><th align="left">引用类型</th></tr></thead><tbody><tr><td align="left">boolean</td><td align="left">Boolean</td></tr><tr><td align="left">byte</td><td align="left">Byte</td></tr><tr><td align="left">short</td><td align="left">Short</td></tr><tr><td align="left">int</td><td align="left">Integer</td></tr><tr><td align="left">long</td><td align="left">Long</td></tr><tr><td align="left">float</td><td align="left">Float</td></tr><tr><td align="left">double</td><td align="left">Double</td></tr><tr><td align="left">char</td><td align="left">Character</td></tr></tbody></table><p>此外，BigInteger、BigDecimal 用于高精度的运算，BigInteger 支持任意精度的整数，也是引用类型，但它们没有相对应的基本类型。</p><p><strong>Java基本类型存储在栈中，因此它们的存取速度要快于存储在堆中的对应包装类的实例对象。</strong>从Java5.0（1.5）开始，JAVA虚拟机可以完成基本类型和它们对应包装类之间的自动转换。因此我们在赋值、参数传递以及数学运算的时候像使用基本类型一样使用它们的包装类，但这并不意味着你可以通过基本类型调用它们的包装类才具有的方法。另外，所有基本类型（包括void）的包装类都使用了final修饰，因此我们无法继承它们扩展新的类，也无法重写它们的任何方法。</p><p><strong>基本类型的优势</strong>：数据存储相对简单，运算效率比较高</p><p><strong>包装类的优势</strong>：有的容易，比如集合的元素必须是对象类型，满足了java一切皆是对象的思想</p><h3 id="2、引用数据类型"><a href="#2、引用数据类型" class="headerlink" title="2、引用数据类型"></a>2、引用数据类型</h3><p>引用数据类型非常多，大致包括：类、 接口类型、 数组类型、 枚举类型、 注解类型、 字符串型</p><p>例如，String 类型就是引用类型。简单来说，所有的非基本数据类型都是引用数据类型。</p><h5 id="引用类型的特征"><a href="#引用类型的特征" class="headerlink" title="引用类型的特征"></a>引用类型的特征</h5><ul><li>对象、数组都是引用数据类型。</li><li>所有引用类型的默认值都是null。</li><li>一个引用变量可以用来引用任何与之兼容的类型。</li></ul><h2 id="二、基本数据类型和引用数据类型的区别"><a href="#二、基本数据类型和引用数据类型的区别" class="headerlink" title="二、基本数据类型和引用数据类型的区别"></a>二、基本数据类型和引用数据类型的区别</h2><h3 id="1、存储位置"><a href="#1、存储位置" class="headerlink" title="1、存储位置"></a>1、存储位置</h3><p>基本变量类型</p><ul><li>在方法中定义的非全局基本数据类型变量的具体内容是存储在栈中的</li></ul><p>引用变量类型</p><ul><li>只要是引用数据类型变量，其具体内容都是存放在堆中的，而栈中存放的是其具体内容所在内存的地址</li></ul><img src="https://tva1.sinaimg.cn/large/008i3skNly1gwkumz8j9lj31910u076y.jpg" alt="image-20211118113223303" style="zoom: 33%;" /><h3 id="2、传递方式"><a href="#2、传递方式" class="headerlink" title="2、传递方式"></a>2、传递方式</h3><ul><li><p>基本变量类型在方法中定义的非全局基本数据类型变量，调用方法时作为参数是按数值传递的</p></li><li><p>引用数据类型变量，调用方法时作为参数是按引用传递的</p></li></ul><p><strong>基本类型保存的值，引用类型保存了是对象的地址</strong>，所有基本类型赋值是按值传递（拷贝赋值），引用类型赋值是按引用传递。</p><h2 id="三、Java的四种引用类型"><a href="#三、Java的四种引用类型" class="headerlink" title="三、Java的四种引用类型"></a>三、Java的四种引用类型</h2><h3 id="四种引用类型"><a href="#四种引用类型" class="headerlink" title="四种引用类型"></a>四种引用类型</h3><p>所以在 JDK.1.2 之后，Java 对引用的概念进行了扩充，将引用分为了：</p><ul><li>强引用（Strong Reference）</li><li>软引用（Soft Reference）</li><li>弱引用（Weak Reference）</li><li>虚引用（Phantom Reference）</li></ul><p>这 4 种引用的强度依次减弱；</p><h3 id="1-强引用"><a href="#1-强引用" class="headerlink" title="1. 强引用"></a>1. 强引用</h3><p>Java中默认声明的就是强引用，比如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">Object obj = <span class="hljs-keyword">new</span> Object(); <span class="hljs-comment">//只要obj还指向Object对象，Object对象就不会被回收</span><br>obj = <span class="hljs-keyword">null</span>;  <span class="hljs-comment">//手动置null</span><br></code></pre></td></tr></table></figure><p><strong>只要强引用存在，垃圾回收器将永远不会回收被引用的对象</strong>，哪怕内存不足时，JVM也会直接抛出OutOfMemoryError，不会去回收。如果想中断强引用与对象之间的联系，可以显示的将强引用赋值为null，这样一来，JVM就可以适时的回收对象了；</p><h3 id="2-软引用"><a href="#2-软引用" class="headerlink" title="2. 软引用"></a>2. 软引用</h3><p>软引用是用来描述一些非必需但仍有用的对象，在内存足够的时候，软引用对象不会被回收，只有 在内存不足时，系统则会回收软引用对象，如果回收了软引用对象之后仍然没有足够的内存，才会抛出内存溢出异常。这种特性常常被用来实现缓存技术，比如网页缓存，图片缓存等等；</p><p>在JDK1.2 以后，用 <code>java.lang.ref.SoftReference</code>类来表示软引用；</p><p>例子：<a href="https://juejin.cn/post/6884507434036133901" target="_blank" rel="noopener">https://juejin.cn/post/6884507434036133901</a></p><h3 id="3-弱引用"><a href="#3-弱引用" class="headerlink" title="3. 弱引用"></a>3. 弱引用</h3><p>弱引用的引用强度比软引用的强度要更弱一些，<strong>无论内存时候足够，只要 JVM 开始进行垃圾回收，那些被弱引用关联的对象都会被回收，</strong> 在 JDK1.2 之后，用 <code>java.lang.ref.WeakReference</code>来表示弱引用</p><h3 id="4-虚引用"><a href="#4-虚引用" class="headerlink" title="4. 虚引用"></a>4. 虚引用</h3><p>虚引用是最弱的一种引用关系，如果一个对象仅持有虚引用，那么它就跟没有任何引用一样，它随时会被回收，在JDK1.2 之后，用 <code>java.lang.ref.PhantomReference</code> 类表示，通过查看这个类的源码，发现它只有一个构造函数和一个<code>get()</code>  方法，而且它的get 方法仅仅是返回一个 <strong>null</strong> ，也就是说永远无法通过虚引用来获取对象，虚引用必须要和 <code>ReferenceQueue</code>  引用对列一起使用。</p><h3 id="引用队列（ReferenceQueue）"><a href="#引用队列（ReferenceQueue）" class="headerlink" title="引用队列（ReferenceQueue）"></a>引用队列（ReferenceQueue）</h3><p>引用队列可以与软引用、弱引用以及虚引用一起配合使用，当垃圾回收器准备回收一个对象时，如果发现它还有引用，那么就会在回收对象之前，把这个引用加入到与之关联的引用队列中去。程序可以通过判断引用队列中是否已经加入了引用，来判断被引用的对象是否将要被垃圾回收，这样就可以在对象被回收之前采取一些必要的措施。</p><p>与软引用、弱引用不同，虚引用必须和引用队列一起使用。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Java数据类型总结：基本类型、引用类型&quot;&gt;&lt;a href=&quot;#Java数据类型总结：基本类型、引用类型&quot; class=&quot;headerlink&quot; title=&quot;Java数据类型总结：基本类型、引用类型&quot;&gt;&lt;/a&gt;Java数据类型总结：基本类型、引用类型&lt;/h1&gt;&lt;
      
    
    </summary>
    
    
      <category term="Data Structure" scheme="http://yoursite.com/categories/Data-Structure/"/>
    
    
      <category term="Data Structure" scheme="http://yoursite.com/tags/Data-Structure/"/>
    
  </entry>
  
  <entry>
    <title>Python 递归返回 None，为嘛呢?</title>
    <link href="http://yoursite.com/2020/12/19/Python%20%E9%80%92%E5%BD%92%E8%BF%94%E5%9B%9E%20None%EF%BC%8C%E4%B8%BA%E5%98%9B%E5%91%A2/"/>
    <id>http://yoursite.com/2020/12/19/Python%20%E9%80%92%E5%BD%92%E8%BF%94%E5%9B%9E%20None%EF%BC%8C%E4%B8%BA%E5%98%9B%E5%91%A2/</id>
    <published>2020-12-19T04:08:10.000Z</published>
    <updated>2020-12-19T06:44:02.201Z</updated>
    
    <content type="html"><![CDATA[<p>首先，我来写一个简化的递归函数，来做用于解释的案例。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">ex</span><span class="hljs-params">(x)</span>:</span><br>    <span class="hljs-keyword">if</span> x &gt; <span class="hljs-number">1</span>:<br>        x -= <span class="hljs-number">1</span><br>        ex(x)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> x<br><br>t = ex(<span class="hljs-number">5</span>)<br>print(t)<br></code></pre></td></tr></table></figure><p>上面的程序逻辑超简单：判断输入的书是否大于 1 ，如果大于 1 则把它减 1 ，然后再判断。如此不断递归下去。当 x 不大于 1 的时候，返回 x 的大小。</p><p>很容易认为返回的 x 打印出来的结果是 1 是不？但是不是的。你可以把上面的代码运行下，打印出来的结果是：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">None</span><br></code></pre></td></tr></table></figure><p>为什么是这样的呢？我的理解是：</p><p>当我们在 t = ex(5) 的时候，调用了一次函数。如果函数直接返回 t = 1，那是木有问题的。问题是，程序在这里返回数据。反而又去调用了一次函数本身。这次调用的的是 ex(4) 然后一直调用的 ex(1) 这时候程序终于运行到了 return 这里。那这次 return 给了谁呢？答案是谁都没有给。因为我们没有设置 t = ex(1)， 所以函数的 return 回的数据就这么丢失了。</p><p>而我们调用的 t = ex(5) 呢，因为它的 if &gt; 1 是成立的，所以直接跳过了了 else: return x ，等于这一次调用，是没有用到 return 的。而在 Python 中规定，如果一个函数体没有 return 的时候，那它的 return 就是 None 。这也就是为什么，我们运行上面的程序的时候，得到的结果是 None 。</p><p>为了证明这点，我们可以去写一个程序，去尝试获得递归到 ex(1) 这次调用时 ex(1) 所返回的值。程序如下：</p><figure class="highlight gml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs gml">t = &#123;&#125;<br><br>def ex(<span class="hljs-symbol">x</span>):<br>    <span class="hljs-literal">global</span> t<br>    <span class="hljs-keyword">if</span> <span class="hljs-symbol">x</span> &gt; <span class="hljs-number">1</span>:<br>        <span class="hljs-symbol">x</span> -= <span class="hljs-number">1</span><br>        t[<span class="hljs-symbol">x</span>] = ex(<span class="hljs-symbol">x</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-symbol">x</span><br><br>ex(<span class="hljs-number">10</span>)<br>print(t)<br></code></pre></td></tr></table></figure><p>在程序中，我们用字典，把 ex(x) 每次调用所返回的数据记录了下来。结果如下：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">&#123;<span class="hljs-number">1</span>: <span class="hljs-number">1</span>, <span class="hljs-number">2</span>: None, <span class="hljs-number">3</span>: None, <span class="hljs-number">4</span>: None, <span class="hljs-number">5</span>: None, <span class="hljs-number">6</span>: None, <span class="hljs-number">7</span>: None, <span class="hljs-number">8</span>: None, <span class="hljs-number">9</span>: None&#125;<br></code></pre></td></tr></table></figure><p>可见：</p><p>在递归中，后调用的函数先返回。<br>除了最后一次调用的函数有了正确的返回外，之前的函数都没有 return ，所以返回的都是 None。</p><p>那如何正确地返回递归出来的数据呢？答案是：一层一层第把最后一次调用返回出来。代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">ex</span><span class="hljs-params">(x)</span>:</span><br>    <span class="hljs-keyword">if</span> x &gt; <span class="hljs-number">1</span>:<br>        x -= <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> ex(x)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> x<br><br>t = ex(<span class="hljs-number">5</span>)<br>print(t)<br></code></pre></td></tr></table></figure><p>结果为：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>为什么这次能正确呢？因为第一次调用 ex(x) 的时候，它返回的是ex(x-1)，下一次调用返回了 ex(x-2) 一路携手交传，最终把 ex(1) return 给了 t ，这个时候就等于 t = ex(1) 了，自然就得到了正确的结果了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;首先，我来写一个简化的递归函数，来做用于解释的案例。&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span c
      
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>数组和链表(2)</title>
    <link href="http://yoursite.com/2020/10/27/%E6%95%B0%E7%BB%84%E5%92%8C%E9%93%BE%E8%A1%A8(2)/"/>
    <id>http://yoursite.com/2020/10/27/%E6%95%B0%E7%BB%84%E5%92%8C%E9%93%BE%E8%A1%A8(2)/</id>
    <published>2020-10-27T15:02:39.000Z</published>
    <updated>2020-11-22T14:59:32.588Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数组实例"><a href="#数组实例" class="headerlink" title="数组实例"></a>数组实例</h2><h5 id="Java"><a href="#Java" class="headerlink" title="++Java++"></a>++Java++</h5><h6 id="一维"><a href="#一维" class="headerlink" title="一维"></a>一维</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 方式一</span><br><span class="hljs-keyword">int</span>[] intArr;<br>intArr = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">9</span>&#125;;<br><br><span class="hljs-comment">//方式二</span><br>String[] strArr = &#123;<span class="hljs-string">"张三"</span>,<span class="hljs-string">"李四"</span>,<span class="hljs-string">"王二麻"</span>&#125;;<br><br><span class="hljs-comment">//方式三</span><br><span class="hljs-keyword">int</span>[] price = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">4</span>];<br></code></pre></td></tr></table></figure><h6 id="多维"><a href="#多维" class="headerlink" title="多维"></a>多维</h6><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">String str[<span class="hljs-string"></span>][<span class="hljs-symbol"></span>] = new String[<span class="hljs-string">3</span>][<span class="hljs-symbol">4</span>];<br></code></pre></td></tr></table></figure><p>数组容量如果不够用可以使用 Arrays.copyOf() 进行扩容：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Array.copyOf(E[] e,newLength);<br></code></pre></td></tr></table></figure><p>其第一个形参指的是需要扩容的数组，后面是扩容后的大小，其内部实现其实是使用了 System.arrayCopy(); 在内部重新创建一个长度为 newLength 类型是 E 的数组。<br>默认补 0，输出结果为： 10 20 30 40 50 0</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Arrays;  <br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span>[] a= &#123;<span class="hljs-number">10</span>,<span class="hljs-number">20</span>,<span class="hljs-number">30</span>,<span class="hljs-number">40</span>,<span class="hljs-number">50</span>&#125;;<br>        a= Arrays.copyOf(a,a.length+<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;a.length;i++) &#123;<br>            System.out.println(a[i]);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="Python"><a href="#Python" class="headerlink" title="++Python++"></a>++Python++</h5><h6 id="一维-1"><a href="#一维-1" class="headerlink" title="一维"></a>一维</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python">list1 = [<span class="hljs-string">'Google'</span>, <span class="hljs-string">'Runoob'</span>, <span class="hljs-number">1997</span>, <span class="hljs-number">2000</span>]<br>list2 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span> ]<br>list3 = [<span class="hljs-string">"a"</span>, <span class="hljs-string">"b"</span>, <span class="hljs-string">"c"</span>, <span class="hljs-string">"d"</span>]<br><br>a=[<span class="hljs-literal">None</span>]*<span class="hljs-number">4</span> <span class="hljs-comment">#[None, None, None, None]</span><br><br>b=list(range(<span class="hljs-number">10</span>)) <span class="hljs-comment">#[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</span><br><br>c = [<span class="hljs-string">'x'</span> <span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> range(<span class="hljs-number">5</span>)] <span class="hljs-comment">#['x', 'x', 'x', 'x', 'x']</span><br><br>字典：dic=&#123;<span class="hljs-string">'a'</span>:<span class="hljs-number">12</span>, <span class="hljs-string">'b'</span>:<span class="hljs-number">34</span>&#125;<br>集合：s = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>&#125;        <br>列表：list=[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>]<br>元组：tup=(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>)    <span class="hljs-comment">#元组是不可更改的列表</span><br></code></pre></td></tr></table></figure><h6 id="多维-1"><a href="#多维-1" class="headerlink" title="多维"></a>多维</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 直接赋值</span><br>a = [<span class="hljs-string">'a'</span>, <span class="hljs-string">'b'</span>, <span class="hljs-string">'c'</span>]<br>n = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br>x = [a, n]<br><br><span class="hljs-comment">#列表生成式法</span><br>test = [[<span class="hljs-number">0</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(m)] <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(n)]<br><br><span class="hljs-comment">#使用模块numpy创建</span><br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br>test = np.zeros((m, n), dtype=np.int)<br></code></pre></td></tr></table></figure><p>==注意== : A=[[0]<em>m]</em>n 这种初始化方式，改变一个元素，会影响整列！！！</p><h2 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h2><p>线性表是最常用且最简单的一种数据结构，它是n个数据元素的有限序列。</p><p>实现线性表的方式一般有两种，一种是使用数组存储线性表的元素，即用一组连续的存储单元依次存储线性表的数据元素。另一种是使用链表存储线性表的元素，即用一组任意的存储单元存储线性表的数据元素（存储单元可以是连续的，也可以是不连续的）。</p><p>数组实现的优缺点:</p><ol><li>优点：无须关心表中元素之间的关系，所以不用增加额外的存储空间；可以快速地取表中任意位置的元素。</li><li>缺点：插入和删除操作需要移动大量元素。使用前需事先分配好内存空间，当线性表长度变化较大时，难以确定存储空间的容量。分配空间过大会造成存储空间的巨大浪费，分配的空间过小，难以适应问题的需求。</li></ol><p>链表实现的优缺点:</p><ol><li>存储方式：单链表用一组任意的存储单元存放线性表的数据元素。</li><li>时间性能：采用循序存储结构时查找的时间复杂度为O(1)，插入和删除需要移动平均一半的数据元素，时间复杂度为O(n)。采用单链表存储结构的查找时间复杂度为O(n)，插入和删除不需要移动元素，时间复杂度仅为O(1）。</li><li>空间性能：采用顺序存储结构时需要预先分配存储空间，分配空间过大会造成浪费，过小会造成问题。采用单链表存储结构时，可根据需要进行临时分配，不需要估计问题的规模大小，只要内存够就可以分配，还可以用于一些特殊情况，如一元多项的表示。</li></ol><h2 id="Java-现成的类-："><a href="#Java-现成的类-：" class="headerlink" title="==Java 现成的类==："></a>==Java 现成的类==：</h2><ul><li><p>线性表： ArrayList.</p><blockquote><p>ArrayList 类是一个可以动态修改的数组，与普通数组的区别就是它是没有固定大小的限制，我们可以添加或删除元素。java自带的集合包中有实现双向链表，路径是:java.util.LinkedList</p></blockquote><blockquote><p>详见: <a href="https://www.runoob.com/java/java-arraylist.html" target="_blank" rel="noopener">https://www.runoob.com/java/java-arraylist.html</a></p></blockquote></li><li><p>链表: LinkedList.</p><blockquote><p>链表（Linked list）是一种常见的基础数据结构，是一种线性表，但是并不会按线性的顺序存储数据，而是在每一个节点里存到下一个节点的地址。</p></blockquote><blockquote><p>详见: <a href="https://www.runoob.com/java/java-linkedlist.html" target="_blank" rel="noopener">https://www.runoob.com/java/java-linkedlist.html</a></p></blockquote></li></ul><h2 id="Python-现成的类-："><a href="#Python-现成的类-：" class="headerlink" title="==Python 现成的类==："></a>==Python 现成的类==：</h2><p>目前没发现, list[]可以append()和insert(),pop()和remove()</p><h2 id="自己实现链表实例"><a href="#自己实现链表实例" class="headerlink" title="自己实现链表实例"></a>自己实现链表实例</h2><h5 id="Java-1"><a href="#Java-1" class="headerlink" title="++Java++"></a>++Java++</h5><p><strong>单向链表</strong></p><h6 id="基础类"><a href="#基础类" class="headerlink" title="基础类"></a>基础类</h6><figure class="highlight Java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Node</span> </span>&#123;<br>    <span class="hljs-comment">//数据域</span><br>    <span class="hljs-keyword">public</span> Object data;<br><br>    <span class="hljs-comment">//指针域，指向下一个节点</span><br>    <span class="hljs-keyword">public</span> Node next;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Node</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Node</span><span class="hljs-params">(Object data)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.data = data;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Node</span><span class="hljs-params">(Object data, Node next)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.data = data;<br>        <span class="hljs-keyword">this</span>.next = next;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="链表类"><a href="#链表类" class="headerlink" title="链表类"></a>链表类</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SingleLinkedList</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> Node head;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> size;<br><br>    <span class="hljs-comment">//单向链表构造函数</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">SingleLinkedList</span><span class="hljs-params">()</span></span>&#123;<br>        head = <span class="hljs-keyword">null</span>;<br>        size = <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//基础方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getSize</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> size;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isEmpty</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> size == <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">append</span><span class="hljs-params">(Object data)</span></span>&#123; <span class="hljs-comment">// 插入尾部</span><br>        Node newNode = <span class="hljs-keyword">new</span> Node(data);<br>        <span class="hljs-keyword">if</span>(head == <span class="hljs-keyword">null</span>)&#123; <br>            head = newNode;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        Node temp = head;<br>        <span class="hljs-keyword">while</span>(temp.next != <span class="hljs-keyword">null</span>)&#123;<br>            temp = temp.next;<br>        &#125;<br>        temp.next = newNode;<br>        newNode.next = <span class="hljs-keyword">null</span>;<br>        size ++;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index, Object data)</span></span>&#123; <span class="hljs-comment">//指定位置插入</span><br>        Node newNode = <span class="hljs-keyword">new</span> Node(data);<br>        <span class="hljs-keyword">if</span>(head == <span class="hljs-keyword">null</span>)&#123; <br>            head = newNode;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        Node pre = head;<br>        Node temp = head.next;<br>        <span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(temp != <span class="hljs-keyword">null</span> &amp;&amp; j &lt; index)&#123;<br>            pre = temp;<br>            temp = temp.next;<br>            j++;<br>        &#125;<br>        newNode.next = <span class="hljs-keyword">null</span>;<br>        pre.next = newNode;<br>        size++;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">pop</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(head == <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<br>        Node pre = head;<br>        Node temp = head.next;<br>        <span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(temp != <span class="hljs-keyword">null</span> &amp;&amp; j &lt; size)&#123;<br>            pre = temp;<br>            temp = temp.next;<br>            j++;<br>        &#125;<br>        pre.next = <span class="hljs-keyword">null</span>;<br>        size--;<br>        <span class="hljs-keyword">return</span> pre.data;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">delete</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index)</span></span>&#123;<br>        <span class="hljs-keyword">if</span> (index &lt; <span class="hljs-number">1</span> || index &gt; size) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">"Invalid Index"</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span>(head == <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span>(head.next == <span class="hljs-keyword">null</span>)&#123;<br>            size--;<br>            <span class="hljs-keyword">return</span> head.data;<br>        &#125;<br><br>        Node pre = head;<br>        Node temp = head.next;<br>        <span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(temp != <span class="hljs-keyword">null</span> &amp;&amp; j &lt; index)&#123;<br>            pre = temp;<br>            temp = temp.next;<br>            j++;<br>        &#125;<br>        pre.next = temp.next;<br>        <span class="hljs-keyword">return</span> pre.data;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">getValue</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index)</span></span>&#123;<br>        <span class="hljs-keyword">if</span> (index &lt; <span class="hljs-number">1</span> || index &gt; size) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">"Invalid Index"</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span>(head == <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span>(head.next == <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">return</span> head.data;<br>        &#125;<br><br>        Node temp = head.next;<br>        <span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(temp != <span class="hljs-keyword">null</span> &amp;&amp; j&lt;index)&#123;<br>            temp = temp.next;<br>            j++;<br>        &#125;<br>        <span class="hljs-keyword">return</span> temp.data;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">print</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(isEmpty())&#123;<br>            System.out.println(<span class="hljs-string">""</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">if</span>(head.next == <span class="hljs-keyword">null</span>)&#123;<br>                System.out.println(head.data);<br>            &#125;<br>            <span class="hljs-keyword">for</span>(Node temp = head.next; temp != <span class="hljs-keyword">null</span>; temp = temp.next)&#123;<br>                System.out.println(temp.data);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h6 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h6><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SingleLinkedListTest</span> &#123;</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">String</span>[] args)</span></span>&#123;<br>SingleLinkedList singleLinkedList=<span class="hljs-keyword">new</span> SingleLinkedList();<br>System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">"初始线性表："</span>);<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">10</span>;i++)&#123;<br>singleLinkedList.insert(i, i);<br>&#125;<br>singleLinkedList.<span class="hljs-built_in">print</span>();<br><br>System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">"在位置4插入元素9后的线性表："</span>);<br>singleLinkedList.insert(<span class="hljs-number">4</span>, <span class="hljs-number">9</span>);<br> <br>singleLinkedList.<span class="hljs-built_in">print</span>();<br><br>System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">"表尾插入元素0后的线性表："</span>);<br>singleLinkedList.append(<span class="hljs-number">0</span>);<br>singleLinkedList.<span class="hljs-built_in">print</span>();<br><br>System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">"删除第5个元素后的线性表："</span>);<br>singleLinkedList.<span class="hljs-keyword">delete</span>(<span class="hljs-number">5</span>);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>双向链表</strong></p><h6 id="基础类-1"><a href="#基础类-1" class="headerlink" title="基础类"></a>基础类</h6><figure class="highlight Java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Node</span> </span>&#123;<br>    <span class="hljs-comment">//数据域</span><br>    <span class="hljs-keyword">public</span> Object data;<br>    <br>    <span class="hljs-comment">//指针域，指向上一个节点</span><br>    <span class="hljs-keyword">public</span> Node prev;<br><br>    <span class="hljs-comment">//指针域，指向下一个节点</span><br>    <span class="hljs-keyword">public</span> Node next;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Node</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Node</span><span class="hljs-params">(Object data)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.data = data;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Node</span><span class="hljs-params">(Object data, Node next)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.data = data;<br>        <span class="hljs-keyword">this</span>.next = next;<br>        <span class="hljs-keyword">this</span>.prev = prev;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="关键操作"><a href="#关键操作" class="headerlink" title="关键操作"></a>关键操作</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">removeElement</span><span class="hljs-params">(E value)</span></span>&#123;<br>    Node index=<span class="hljs-keyword">this</span>.first;<span class="hljs-comment">//创建index节点指向first节点</span><br>    <span class="hljs-keyword">while</span>(index!=<span class="hljs-keyword">null</span>)&#123;<br>        <span class="hljs-keyword">if</span>(index.e==value)<span class="hljs-keyword">break</span>;<br>        index=index.next;<br>    &#125;<span class="hljs-comment">//while循环用于遍历整个链表来获取指向要删除的节点指针</span><br>    index.previous.next=index.next;<br>    index.next.previous=index.previous;<br>    length--;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>循环链表</strong></p><h6 id="基础类-2"><a href="#基础类-2" class="headerlink" title="基础类"></a>基础类</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Node</span> </span>&#123;<br>    <span class="hljs-comment">//数据域</span><br>    <span class="hljs-keyword">public</span> Object data;<br><br>    <span class="hljs-comment">//指针域，指向下一个节点</span><br>    <span class="hljs-keyword">public</span> Node next;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Node</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Node</span><span class="hljs-params">(Object data)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.data = data;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Node</span><span class="hljs-params">(Object data, Node next)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.data = data;<br>        <span class="hljs-keyword">this</span>.next = next;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="链表类-1"><a href="#链表类-1" class="headerlink" title="链表类"></a>链表类</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LoopLinkedList</span> </span>&#123;<br>     <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> size;<br>     <span class="hljs-keyword">public</span> Node head;<br><br>     <span class="hljs-comment">/**<br>     * 添加元素<br>     * <span class="hljs-doctag">@param</span> obj<br>     * <span class="hljs-doctag">@return</span><br>     */</span><br>     <span class="hljs-function"><span class="hljs-keyword">public</span> Node <span class="hljs-title">add</span><span class="hljs-params">(Object obj)</span></span>&#123;<br>         Node newNode = <span class="hljs-keyword">new</span> Node(obj);<br>         <span class="hljs-keyword">if</span>(size == <span class="hljs-number">0</span>)&#123;<br>             head = newNode;<br>             head.next = head;<br>         &#125;<span class="hljs-keyword">else</span>&#123;<br>             Node target = head;<br>             <span class="hljs-keyword">while</span>(target.next!=head)&#123;<br>                 target = target.next;<br>             &#125;<br>             target.next = newNode;<br>             newNode.next = head;<br>         &#125;<br>         size++;<br>         <span class="hljs-keyword">return</span> newNode;<br>     &#125;<br><br>     <span class="hljs-comment">/**<br>     * 在指定位置插入元素<br>     * <span class="hljs-doctag">@return</span><br>     */</span><br>     <span class="hljs-function"><span class="hljs-keyword">public</span> Node <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index,Object obj)</span></span>&#123;<br>         <span class="hljs-keyword">if</span>(index &gt;= size)&#123;<br>             <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>         &#125;<br>         Node newNode = <span class="hljs-keyword">new</span> Node(obj);<br>         <span class="hljs-keyword">if</span>(index == <span class="hljs-number">0</span>)&#123;<br>             newNode.next = head;<br>             head = newNode;<br>         &#125;<span class="hljs-keyword">else</span>&#123;<br>             Node target = head;<br>             Node previous = head;<br>             <span class="hljs-keyword">int</span> pos = <span class="hljs-number">0</span>;<br>             <span class="hljs-keyword">while</span>(pos != index)&#123;<br>                 previous = target;<br>                 target = target.next;<br>                 pos++;<br>             &#125;<br>             previous.next = newNode;<br>             newNode.next = target;<br>         &#125;<br>         size++;<br>         <span class="hljs-keyword">return</span> newNode;<br>     &#125;<br><br>     <span class="hljs-comment">/**<br>     * 删除链表头部元素<br>     * <span class="hljs-doctag">@return</span><br>     */</span><br>     <span class="hljs-function"><span class="hljs-keyword">public</span> Node <span class="hljs-title">removeHead</span><span class="hljs-params">()</span></span>&#123;<br>         <span class="hljs-keyword">if</span>(size &gt; <span class="hljs-number">0</span>)&#123;<br>             Node node = head;<br>             Node target = head;<br>             <span class="hljs-keyword">while</span>(target.next!=head)&#123;<br>                 target = target.next;<br>             &#125;<br>             head = head.next;<br>             target.next = head;<br>             size--;<br>             <span class="hljs-keyword">return</span> node;<br>         &#125;<span class="hljs-keyword">else</span>&#123;<br>             <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>         &#125;<br>     &#125;<br><br>     <span class="hljs-comment">/**<br>     * 删除指定位置元素<br>     * <span class="hljs-doctag">@return</span><br>     */</span><br>     <span class="hljs-function"><span class="hljs-keyword">public</span> Node <span class="hljs-title">remove</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index)</span></span>&#123;<br>         <span class="hljs-keyword">if</span>(index &gt;= size)&#123;<br>             <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>         &#125;<br>         Node result = head;<br>         <span class="hljs-keyword">if</span>(index == <span class="hljs-number">0</span>)&#123;<br>             head = head.next;<br>         &#125;<span class="hljs-keyword">else</span>&#123;<br>             Node target = head;<br>             Node previous = head;<br>             <span class="hljs-keyword">int</span> pos = <span class="hljs-number">0</span>;<br>             <span class="hljs-keyword">while</span>(pos != index)&#123;<br>                 previous = target;<br>                 target = target.next;<br>                 pos++;<br>             &#125;<br>             previous.next = target.next;<br>             result = target;<br>         &#125;<br>         size--;<br>         <span class="hljs-keyword">return</span> result;<br>     &#125;<br><br>     <span class="hljs-comment">/**<br>     * 删除指定元素<br>     * <span class="hljs-doctag">@return</span><br>     */</span><br>     <span class="hljs-function"><span class="hljs-keyword">public</span> Node <span class="hljs-title">removeNode</span><span class="hljs-params">(Object obj)</span></span>&#123;<br>         Node target = head;<br>         Node previoust = head;<br>         <span class="hljs-keyword">if</span>(obj.equals(target.data))&#123;<br>             head = head.next;<br>             size--;<br>         &#125;<span class="hljs-keyword">else</span>&#123;<br>             <span class="hljs-keyword">while</span>(target.next!=<span class="hljs-keyword">null</span>)&#123;<br>                 <span class="hljs-keyword">if</span>(obj.equals(target.next.data))&#123;<br>                     previoust = target;<br>                     target = target.next;<br>                     size--;<br>                     <span class="hljs-keyword">break</span>;<br>                 &#125;<span class="hljs-keyword">else</span>&#123;<br>                     target = target.next;<br>                     previoust = previoust.next;<br>                 &#125;<br>             &#125;<br>             previoust.next = target.next;<br>         &#125;<br>         <span class="hljs-keyword">return</span> target;<br>     &#125;<br><br>     <span class="hljs-comment">/**<br>     * 返回指定元素<br>     * <span class="hljs-doctag">@return</span><br>     */</span><br>     <span class="hljs-function"><span class="hljs-keyword">public</span> Node <span class="hljs-title">findNode</span><span class="hljs-params">(Object obj)</span></span>&#123;<br>         Node target = head;<br>         <span class="hljs-keyword">while</span>(target.next!=<span class="hljs-keyword">null</span>)&#123;<br>             <span class="hljs-keyword">if</span>(obj.equals(target.data))&#123;<br>                 <span class="hljs-keyword">return</span> target;<br>             &#125;<span class="hljs-keyword">else</span>&#123;<br>                 target = target.next;<br>             &#125;<br>         &#125;<br>         <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>     &#125;<br><br>     <span class="hljs-comment">/**<br>     * 输出链表元素<br>     */</span><br>     <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span></span>&#123;<br>         <span class="hljs-keyword">if</span>(size &gt; <span class="hljs-number">0</span>)&#123;<br>             Node node = head;<br>             <span class="hljs-keyword">int</span> length = size;<br>             System.out.print(<span class="hljs-string">"["</span>);<br>             <span class="hljs-keyword">while</span>(length &gt; <span class="hljs-number">0</span>)&#123;<br>                 <span class="hljs-keyword">if</span>(length == <span class="hljs-number">1</span>)&#123;<br>                     System.out.print(node.data);<br>                 &#125;<span class="hljs-keyword">else</span>&#123;<br>                     System.out.print(node.data+<span class="hljs-string">","</span>);<br>                 &#125;<br>                 node = node.next;<br>                 length--;<br>             &#125;<br>             System.out.println(<span class="hljs-string">"]"</span>);<br>         &#125;<span class="hljs-keyword">else</span>&#123;<br>             System.out.println(<span class="hljs-string">"[]"</span>);<br>         &#125;<br>     &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="Python-1"><a href="#Python-1" class="headerlink" title="++Python++"></a>++Python++</h5><p><strong>单向链表</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Node</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self,data = None, next = None)</span>:</span><br>        self.data = data<br>        self.next = <span class="hljs-literal">None</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SingleLinkList</span><span class="hljs-params">(object)</span>:</span><br>    <span class="hljs-string">"""单链表"""</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self)</span>:</span><br>        self._head = <span class="hljs-literal">None</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">is_empty</span><span class="hljs-params">(self)</span>:</span><br>        <span class="hljs-string">"""判断链表是否为空"""</span><br>        <span class="hljs-keyword">return</span> self._head <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">length</span><span class="hljs-params">(self)</span>:</span><br>        <span class="hljs-string">"""链表长度"""</span><br>        <span class="hljs-comment"># 初始指针指向head</span><br>        cur = self._head<br>        count = <span class="hljs-number">0</span><br>        <span class="hljs-comment"># 指针指向None 表示到达尾部</span><br>        <span class="hljs-keyword">while</span> cur <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>            count += <span class="hljs-number">1</span><br>            <span class="hljs-comment"># 指针下移</span><br>            cur = cur.next<br>        <span class="hljs-keyword">return</span> count<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">items</span><span class="hljs-params">(self)</span>:</span><br>        <span class="hljs-string">"""遍历链表"""</span><br>        <span class="hljs-comment"># 获取head指针</span><br>        cur = self._head<br>        <span class="hljs-comment"># 循环遍历</span><br>        <span class="hljs-keyword">while</span> cur <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-comment"># 返回生成器</span><br>            <span class="hljs-keyword">yield</span> cur.item<br>            <span class="hljs-comment"># 指针下移</span><br>            cur = cur.next<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span><span class="hljs-params">(self, item)</span>:</span><br>        <span class="hljs-string">"""向链表头部添加元素"""</span><br>        node = Node(item)<br>        <span class="hljs-comment"># 新结点指针指向原头部结点</span><br>        node.next = self._head<br>        <span class="hljs-comment"># 头部结点指针修改为新结点</span><br>        self._head = node<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">append</span><span class="hljs-params">(self, item)</span>:</span><br>        <span class="hljs-string">"""尾部添加元素"""</span><br>        node = Node(item)<br>        <span class="hljs-comment"># 先判断是否为空链表</span><br>        <span class="hljs-keyword">if</span> self.is_empty():<br>            <span class="hljs-comment"># 空链表，_head 指向新结点</span><br>            self._head = node<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-comment"># 不是空链表，则找到尾部，将尾部next结点指向新结点</span><br>            cur = self._head<br>            <span class="hljs-keyword">while</span> cur.next <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>                cur = cur.next<br>            cur.next = node<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">insert</span><span class="hljs-params">(self, index, item)</span>:</span><br>        <span class="hljs-string">"""指定位置插入元素"""</span><br>        <span class="hljs-comment"># 指定位置在第一个元素之前，在头部插入</span><br>        <span class="hljs-keyword">if</span> index &lt;= <span class="hljs-number">0</span>:<br>            self.add(item)<br>        <span class="hljs-comment"># 指定位置超过尾部，在尾部插入</span><br>        <span class="hljs-keyword">elif</span> index &gt; (self.length() - <span class="hljs-number">1</span>):<br>            self.append(item)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-comment"># 创建元素结点</span><br>            node = Node(item)<br>            cur = self._head<br>            <span class="hljs-comment"># 循环到需要插入的位置</span><br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(index - <span class="hljs-number">1</span>):<br>                cur = cur.next<br>            node.next = cur.next<br>            cur.next = node<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">remove</span><span class="hljs-params">(self, item)</span>:</span><br>        <span class="hljs-string">"""删除节点"""</span><br>        cur = self._head<br>        pre = <span class="hljs-literal">None</span><br>        <span class="hljs-keyword">while</span> cur <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-comment"># 找到指定元素</span><br>            <span class="hljs-keyword">if</span> cur.item == item:<br>                <span class="hljs-comment"># 如果第一个就是删除的节点</span><br>                <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> pre:<br>                    <span class="hljs-comment"># 将头指针指向头节点的后一个节点</span><br>                    self._head = cur.next<br>                <span class="hljs-keyword">else</span>:<br>                    <span class="hljs-comment"># 将删除位置前一个节点的next指向删除位置的后一个节点</span><br>                    pre.next = cur.next<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-comment"># 继续按链表后移节点</span><br>                pre = cur<br>                cur = cur.next<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">find</span><span class="hljs-params">(self, item)</span>:</span><br>        <span class="hljs-string">"""查找元素是否存在"""</span><br>        <span class="hljs-keyword">return</span> item <span class="hljs-keyword">in</span> self.items()<br></code></pre></td></tr></table></figure><p><strong>双向链表</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Node</span><span class="hljs-params">(object)</span>:</span><br>    <span class="hljs-string">"""双向链表的结点"""</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, item)</span>:</span><br>        <span class="hljs-comment"># item存放数据元素</span><br>        self.item = item<br>        <span class="hljs-comment"># next 指向下一个节点的标识</span><br>        self.next = <span class="hljs-literal">None</span><br>        <span class="hljs-comment"># prev 指向上一结点</span><br>        self.prev = <span class="hljs-literal">None</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BilateralLinkList</span><span class="hljs-params">(object)</span>:</span><br>    <span class="hljs-string">"""双向链表"""</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self)</span>:</span><br>        self._head = <span class="hljs-literal">None</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">is_empty</span><span class="hljs-params">(self)</span>:</span><br>        <span class="hljs-string">"""判断链表是否为空"""</span><br>        <span class="hljs-keyword">return</span> self._head <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">length</span><span class="hljs-params">(self)</span>:</span><br>        <span class="hljs-string">"""链表长度"""</span><br>        <span class="hljs-comment"># 初始指针指向head</span><br>        cur = self._head<br>        count = <span class="hljs-number">0</span><br>        <span class="hljs-comment"># 指针指向None 表示到达尾部</span><br>        <span class="hljs-keyword">while</span> cur <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>            count += <span class="hljs-number">1</span><br>            <span class="hljs-comment"># 指针下移</span><br>            cur = cur.next<br>        <span class="hljs-keyword">return</span> count<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">items</span><span class="hljs-params">(self)</span>:</span><br>        <span class="hljs-string">"""遍历链表"""</span><br>        <span class="hljs-comment"># 获取head指针</span><br>        cur = self._head<br>        <span class="hljs-comment"># 循环遍历</span><br>        <span class="hljs-keyword">while</span> cur <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-comment"># 返回生成器</span><br>            <span class="hljs-keyword">yield</span> cur.item<br>            <span class="hljs-comment"># 指针下移</span><br>            cur = cur.next<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span><span class="hljs-params">(self, item)</span>:</span><br>        <span class="hljs-string">"""向链表头部添加元素"""</span><br>        node = Node(item)<br>        <span class="hljs-keyword">if</span> self.is_empty():<br>            <span class="hljs-comment"># 头部结点指针修改为新结点</span><br>            self._head = node<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-comment"># 新结点指针指向原头部结点</span><br>            node.next = self._head<br>            <span class="hljs-comment"># 原头部 prev 指向 新结点</span><br>            self._head.prev = node<br>            <span class="hljs-comment"># head 指向新结点</span><br>            self._head = node<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">append</span><span class="hljs-params">(self, item)</span>:</span><br>        <span class="hljs-string">"""尾部添加元素"""</span><br>        node = Node(item)<br>        <span class="hljs-keyword">if</span> self.is_empty():  <span class="hljs-comment"># 链表无元素</span><br>            <span class="hljs-comment"># 头部结点指针修改为新结点</span><br>            self._head = node<br>        <span class="hljs-keyword">else</span>:  <span class="hljs-comment"># 链表有元素</span><br>            <span class="hljs-comment"># 移动到尾部</span><br>            cur = self._head<br>            <span class="hljs-keyword">while</span> cur.next <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>                cur = cur.next<br>            <span class="hljs-comment"># 新结点上一级指针指向旧尾部</span><br>            node.prev = cur<br>            <span class="hljs-comment"># 旧尾部指向新结点</span><br>            cur.next = node<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">insert</span><span class="hljs-params">(self, index, item)</span>:</span><br>        <span class="hljs-string">""" 指定位置插入元素"""</span><br>        <span class="hljs-keyword">if</span> index &lt;= <span class="hljs-number">0</span>:<br>            self.add(item)<br>        <span class="hljs-keyword">elif</span> index &gt; self.length() - <span class="hljs-number">1</span>:<br>            self.append(item)<br>        <span class="hljs-keyword">else</span>:<br>            node = Node(item)<br>            cur = self._head<br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(index):<br>                cur = cur.next<br>            <span class="hljs-comment"># 新结点的向下指针指向当前结点</span><br>            node.next = cur<br>            <span class="hljs-comment"># 新结点的向上指针指向当前结点的上一结点</span><br>            node.prev = cur.prev<br>            <span class="hljs-comment"># 当前上一结点的向下指针指向node</span><br>            cur.prev.next = node<br>            <span class="hljs-comment"># 当前结点的向上指针指向新结点</span><br>            cur.prev = node<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">remove</span><span class="hljs-params">(self, item)</span>:</span><br>        <span class="hljs-string">""" 删除结点 """</span><br>        <span class="hljs-keyword">if</span> self.is_empty():<br>            <span class="hljs-keyword">return</span><br>        cur = self._head<br>        <span class="hljs-comment"># 删除元素在第一个结点</span><br>        <span class="hljs-keyword">if</span> cur.item == item:<br>            <span class="hljs-comment"># 只有一个元素</span><br>            <span class="hljs-keyword">if</span> cur.next <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>                self._head = <span class="hljs-literal">None</span><br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-comment"># head 指向下一结点</span><br>                self._head = cur.next<br>                <span class="hljs-comment"># 下一结点的向上指针指向None</span><br>                cur.next.prev = <span class="hljs-literal">None</span><br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>        <span class="hljs-comment"># 移动指针查找元素</span><br>        <span class="hljs-keyword">while</span> cur.next <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">if</span> cur.item == item:<br>                <span class="hljs-comment"># 上一结点向下指针指向下一结点</span><br>                cur.prev.next = cur.next<br>                <span class="hljs-comment"># 下一结点向上指针指向上一结点</span><br>                cur.next.prev = cur.prev<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>            cur = cur.next<br>        <span class="hljs-comment"># 删除元素在最后一个</span><br>        <span class="hljs-keyword">if</span> cur.item == item:<br>            <span class="hljs-comment"># 上一结点向下指针指向None</span><br>            cur.prev.next = <span class="hljs-literal">None</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">find</span><span class="hljs-params">(self, item)</span>:</span><br>        <span class="hljs-string">"""查找元素是否存在"""</span><br>        <span class="hljs-keyword">return</span> item <span class="hljs-keyword">in</span> self.items()<br></code></pre></td></tr></table></figure><p><strong>循环链表</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Node</span><span class="hljs-params">(object)</span>:</span><br>    <span class="hljs-string">"""链表的结点"""</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, item)</span>:</span><br>        <span class="hljs-comment"># item存放数据元素</span><br>        self.item = item<br>        <span class="hljs-comment"># next是下一个节点的标识</span><br>        self.next = <span class="hljs-literal">None</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SingleCycleLinkList</span><span class="hljs-params">(object)</span>:</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self)</span>:</span><br>        self._head = <span class="hljs-literal">None</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">is_empty</span><span class="hljs-params">(self)</span>:</span><br>        <span class="hljs-string">"""判断链表是否为空"""</span><br>        <span class="hljs-keyword">return</span> self._head <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">length</span><span class="hljs-params">(self)</span>:</span><br>        <span class="hljs-string">"""链表长度"""</span><br>        <span class="hljs-comment"># 链表为空</span><br>        <span class="hljs-keyword">if</span> self.is_empty():<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>        <span class="hljs-comment"># 链表不为空</span><br>        count = <span class="hljs-number">1</span><br>        cur = self._head<br>        <span class="hljs-keyword">while</span> cur.next != self._head:<br>            count += <span class="hljs-number">1</span><br>            <span class="hljs-comment"># 指针下移</span><br>            cur = cur.next<br>        <span class="hljs-keyword">return</span> count<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">items</span><span class="hljs-params">(self)</span>:</span><br>        <span class="hljs-string">""" 遍历链表 """</span><br>        <span class="hljs-comment"># 链表为空</span><br>        <span class="hljs-keyword">if</span> self.is_empty():<br>            <span class="hljs-keyword">return</span><br>        <span class="hljs-comment"># 链表不为空</span><br>        cur = self._head<br>        <span class="hljs-keyword">while</span> cur.next != self._head:<br>            <span class="hljs-keyword">yield</span> cur.item<br>            cur = cur.next<br>        <span class="hljs-keyword">yield</span> cur.item<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span><span class="hljs-params">(self, item)</span>:</span><br>        <span class="hljs-string">""" 头部添加结点"""</span><br>        node = Node(item)<br>        <span class="hljs-keyword">if</span> self.is_empty():  <span class="hljs-comment"># 为空</span><br>            self._head = node<br>            node.next = self._head<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-comment"># 添加结点指向head</span><br>            node.next = self._head<br>            cur = self._head<br>            <span class="hljs-comment"># 移动结点，将末尾的结点指向node</span><br>            <span class="hljs-keyword">while</span> cur.next != self._head:<br>                cur = cur.next<br>            cur.next = node<br>        <span class="hljs-comment"># 修改 head 指向新结点</span><br>        self._head = node<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">append</span><span class="hljs-params">(self, item)</span>:</span><br>        <span class="hljs-string">"""尾部添加结点"""</span><br>        node = Node(item)<br>        <span class="hljs-keyword">if</span> self.is_empty():  <span class="hljs-comment"># 为空</span><br>            self._head = node<br>            node.next = self._head<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-comment"># 寻找尾部</span><br>            cur = self._head<br>            <span class="hljs-keyword">while</span> cur.next != self._head:<br>                cur = cur.next<br>            <span class="hljs-comment"># 尾部指针指向新结点</span><br>            cur.next = node<br>            <span class="hljs-comment"># 新结点指针指向head</span><br>            node.next = self._head<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">insert</span><span class="hljs-params">(self, index, item)</span>:</span><br>        <span class="hljs-string">""" 指定位置添加结点"""</span><br>        <span class="hljs-keyword">if</span> index &lt;= <span class="hljs-number">0</span>:  <span class="hljs-comment"># 指定位置小于等于0，头部添加</span><br>            self.add(item)<br>        <span class="hljs-comment"># 指定位置大于链表长度，尾部添加</span><br>        <span class="hljs-keyword">elif</span> index &gt; self.length() - <span class="hljs-number">1</span>:<br>            self.append(item)<br>        <span class="hljs-keyword">else</span>:<br>            node = Node(item)<br>            cur = self._head<br>            <span class="hljs-comment"># 移动到添加结点位置</span><br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(index - <span class="hljs-number">1</span>):<br>                cur = cur.next<br>            <span class="hljs-comment"># 新结点指针指向旧结点</span><br>            node.next = cur.next<br>            <span class="hljs-comment"># 旧结点指针 指向 新结点</span><br>            cur.next = node<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">remove</span><span class="hljs-params">(self, item)</span>:</span><br>        <span class="hljs-string">""" 删除一个结点 """</span><br>        <span class="hljs-keyword">if</span> self.is_empty():<br>            <span class="hljs-keyword">return</span><br>        cur = self._head<br>        pre = Node<br>        <span class="hljs-comment"># 第一个元素为需要删除的元素</span><br>        <span class="hljs-keyword">if</span> cur.item == item:<br>            <span class="hljs-comment"># 链表不止一个元素</span><br>            <span class="hljs-keyword">if</span> cur.next != self._head:<br>                <span class="hljs-keyword">while</span> cur.next != self._head:<br>                    cur = cur.next<br>                <span class="hljs-comment"># 尾结点指向 头部结点的下一结点</span><br>                cur.next = self._head.next<br>                <span class="hljs-comment"># 调整头部结点</span><br>                self._head = self._head.next<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-comment"># 只有一个元素</span><br>                self._head = <span class="hljs-literal">None</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-comment"># 不是第一个元素</span><br>            pre = self._head<br>            <span class="hljs-keyword">while</span> cur.next != self._head:<br>                <span class="hljs-keyword">if</span> cur.item == item:<br>                    <span class="hljs-comment"># 删除</span><br>                    pre.next = cur.next<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>                <span class="hljs-keyword">else</span>:<br><br>                    pre = cur  <span class="hljs-comment"># 记录前一个指针</span><br>                    cur = cur.next  <span class="hljs-comment"># 调整指针位置</span><br>        <span class="hljs-comment"># 当删除元素在末尾</span><br>        <span class="hljs-keyword">if</span> cur.item == item:<br>            pre.next = self._head<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">find</span><span class="hljs-params">(self, item)</span>:</span><br>        <span class="hljs-string">""" 查找元素是否存在"""</span><br>        <span class="hljs-keyword">return</span> item <span class="hljs-keyword">in</span> self.items()<br></code></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;数组实例&quot;&gt;&lt;a href=&quot;#数组实例&quot; class=&quot;headerlink&quot; title=&quot;数组实例&quot;&gt;&lt;/a&gt;数组实例&lt;/h2&gt;&lt;h5 id=&quot;Java&quot;&gt;&lt;a href=&quot;#Java&quot; class=&quot;headerlink&quot; title=&quot;++Java++&quot;
      
    
    </summary>
    
    
      <category term="Data Structure" scheme="http://yoursite.com/categories/Data-Structure/"/>
    
    
      <category term="Array and Linked List" scheme="http://yoursite.com/tags/Array-and-Linked-List/"/>
    
  </entry>
  
  <entry>
    <title>数组和链表(1)</title>
    <link href="http://yoursite.com/2020/10/12/%E6%95%B0%E7%BB%84%E5%92%8C%E9%93%BE%E8%A1%A8(1)/"/>
    <id>http://yoursite.com/2020/10/12/%E6%95%B0%E7%BB%84%E5%92%8C%E9%93%BE%E8%A1%A8(1)/</id>
    <published>2020-10-12T15:02:39.000Z</published>
    <updated>2020-10-12T15:03:51.298Z</updated>
    
    <content type="html"><![CDATA[<h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><p>数组(Array) 每一个数组元素的位置由数字编号，称为下标或者索引(index)。大多数编程语言的数组第一个元素的下标是 0。</p><p>数组的基本操作：</p><ul><li>Insert - 在某个索引处插入元素</li><li>Get - 读取某个索引处的元素</li><li>Delete - 删除某个索引处的元素</li><li>Size - 获取数组的长度</li></ul><h4 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h4><p>链表(Linked List)也是线性结构，它与数组看起来非常像，但是它们的内存分配方式、内部结构和插入删除操作方式都不一样。</p><p>链表是一系列节点组成的链，每一个节点保存了数据以及指向下一个节点的指针。由于是通过指针进行下一个数据元素的查找和访问，使得链表的自由度更高。链表头指针指向第一个节点，如果链表为空，则头指针为空或者为 null。</p><p>这表现在对节点进行<strong>增加和删除时，只需要对上一节点的指针地址进行修改，而无需变动其它的节点</strong>。不过事物皆有两极，指针带来高自由度的同时，自然会<strong>牺牲数据查找的效率和多余空间的使用</strong>。</p><p>链表可以用来实现文件系统、哈希表和邻接表。<br><img src="https://s1.ax1x.com/2020/10/04/08WWY6.png" alt="08WWY6.png"></p><p>链表分为 2 种：</p><ul><li>单向链表</li><li>双向链表</li></ul><p>链表的基本操作</p><ul><li>InsertAtEnd：在链表结尾插入元素</li><li>InsertAtHead：在链表开头插入元素</li><li>Delete：删除链表的指定元素</li><li>DeleteAtHead：删除链表第一个元素</li><li>Search：在链表中查询指定元素</li><li>isEmpty：查询链表是否为空</li></ul><p><img src="https://s1.ax1x.com/2020/10/04/08fmX4.png" alt="08fmX4.png"></p><h4 id="跳表"><a href="#跳表" class="headerlink" title="跳表"></a>跳表</h4><p>从上面的对比中可以看出，链表虽然通过增加指针域提升了自由度，但是却导致数据的查询效率恶化。特别是当链表长度很长的时候，对数据的查询还得从头依次查询，这样的效率会更低。跳表的产生就是为了解决链表过长的问题，通过增加链表的多级索引来加快原始链表的查询效率。这样的方式可以让查询的时间复杂度从O(n)提升至O(logn)。</p><p><img src="https://s1.ax1x.com/2020/10/04/08f1tx.png" alt="08f1tx.png"></p><p>跳表通过增加的多级索引能够实现高效的动态插入和删除，其效率和红黑树和平衡二叉树不相上下。目前redis和levelDB都有用到跳表。</p><p>从上图可以看出，索引级的指针域除了指向下一个索引位置的指针，还有一个down指针指向低一级的链表位置，这样才能实现跳跃查询的目的。</p><h4 id="总结图："><a href="#总结图：" class="headerlink" title="总结图："></a>总结图：</h4><p><img src="https://s1.ax1x.com/2020/10/04/08RJ56.jpg" alt="08RJ56.jpg"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;数组&quot;&gt;&lt;a href=&quot;#数组&quot; class=&quot;headerlink&quot; title=&quot;数组&quot;&gt;&lt;/a&gt;数组&lt;/h4&gt;&lt;p&gt;数组(Array) 每一个数组元素的位置由数字编号，称为下标或者索引(index)。大多数编程语言的数组第一个元素的下标是 0。&lt;/p&gt;
&lt;
      
    
    </summary>
    
    
      <category term="Data Structure" scheme="http://yoursite.com/categories/Data-Structure/"/>
    
    
      <category term="Array and Linked List" scheme="http://yoursite.com/tags/Array-and-Linked-List/"/>
    
  </entry>
  
  <entry>
    <title>数据结构导读</title>
    <link href="http://yoursite.com/2020/10/12/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AF%BC%E8%AF%BB/"/>
    <id>http://yoursite.com/2020/10/12/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AF%BC%E8%AF%BB/</id>
    <published>2020-10-12T14:57:04.000Z</published>
    <updated>2020-10-12T15:01:09.268Z</updated>
    
    <content type="html"><![CDATA[<h3 id="数据的逻辑结构"><a href="#数据的逻辑结构" class="headerlink" title="数据的逻辑结构"></a>数据的逻辑结构</h3><p>（1）集合结构：集合的数据元素没有其他关系，仅仅是因为他们挤在一个被称作“集合”的盒子里。</p><p>（2）线性结构：线性的数据元素结构关系是一对一的，并且是一种先后的次序，就像a-b-c-d-e-f-g·····被一根线穿连起来。</p><p>（3）树形结构：树形的数据元素结构关系是一对多的，这就像公司的部门级别，董事长-CEO\CTO-技术部\人事部\市场部…..。</p><p>（4）图结构：图的数据元素结构关系是多对多的。就是我们常见的各大城市的铁路图，一个城市有很多线路连接不同城市。</p><h3 id="数据的存储（物理）结构"><a href="#数据的存储（物理）结构" class="headerlink" title="数据的存储（物理）结构"></a>数据的存储（物理）结构</h3><p>（1）顺序存储结构：是把数据元素存放在一组存储地址连续的存储单元里，其数据元素间的逻辑关系和物理关系是一致的。</p><p>（2）链式存储结果：是把数据元素存放在任意的存储单元里，这组存储单元可以是连续的，也可以是不连续的，数据元素的存储关系并不能反映其逻辑关系，因此需要借助指针来表示数据元素之间的逻辑关系。</p><p><img src="https://s1.ax1x.com/2020/10/04/08R8V1.jpg" alt="08R8V1.jpg"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;数据的逻辑结构&quot;&gt;&lt;a href=&quot;#数据的逻辑结构&quot; class=&quot;headerlink&quot; title=&quot;数据的逻辑结构&quot;&gt;&lt;/a&gt;数据的逻辑结构&lt;/h3&gt;&lt;p&gt;（1）集合结构：集合的数据元素没有其他关系，仅仅是因为他们挤在一个被称作“集合”的盒子里。&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="Data Structure" scheme="http://yoursite.com/categories/Data-Structure/"/>
    
    
      <category term="Guide" scheme="http://yoursite.com/tags/Guide/"/>
    
  </entry>
  
  <entry>
    <title>时间复杂度(2) - 各数据结构时间复杂度和各数组排序算法时间复杂度</title>
    <link href="http://yoursite.com/2020/10/12/%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6(2)%20-%20%E5%90%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%92%8C%E5%90%84%E6%95%B0%E7%BB%84%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/"/>
    <id>http://yoursite.com/2020/10/12/%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6(2)%20-%20%E5%90%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%92%8C%E5%90%84%E6%95%B0%E7%BB%84%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/</id>
    <published>2020-10-12T14:55:32.000Z</published>
    <updated>2020-10-12T14:56:31.306Z</updated>
    
    <content type="html"><![CDATA[<h4 id="各种数据结构的时间复杂度"><a href="#各种数据结构的时间复杂度" class="headerlink" title="各种数据结构的时间复杂度"></a>各种数据结构的时间复杂度</h4><p><img src="https://s1.ax1x.com/2020/10/01/0KvN4A.png" alt="0KvN4A.png"></p><h4 id="数组排序算法的时间复杂度"><a href="#数组排序算法的时间复杂度" class="headerlink" title="数组排序算法的时间复杂度"></a>数组排序算法的时间复杂度</h4><p><img src="https://s1.ax1x.com/2020/10/01/0Kv0jf.png" alt="0Kv0jf.png"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;各种数据结构的时间复杂度&quot;&gt;&lt;a href=&quot;#各种数据结构的时间复杂度&quot; class=&quot;headerlink&quot; title=&quot;各种数据结构的时间复杂度&quot;&gt;&lt;/a&gt;各种数据结构的时间复杂度&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;https://s1.ax1x.com/
      
    
    </summary>
    
    
      <category term="Data Structure" scheme="http://yoursite.com/categories/Data-Structure/"/>
    
    
      <category term="Complexity" scheme="http://yoursite.com/tags/Complexity/"/>
    
  </entry>
  
  <entry>
    <title>时间复杂度(1) - 计算和比较</title>
    <link href="http://yoursite.com/2020/09/30/%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6(1)%20-%20%E8%AE%A1%E7%AE%97%E5%92%8C%E6%AF%94%E8%BE%83/"/>
    <id>http://yoursite.com/2020/09/30/%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6(1)%20-%20%E8%AE%A1%E7%AE%97%E5%92%8C%E6%AF%94%E8%BE%83/</id>
    <published>2020-09-30T14:56:38.000Z</published>
    <updated>2021-06-23T01:17:43.541Z</updated>
    
    <content type="html"><![CDATA[<h2 id="算法的时间复杂度"><a href="#算法的时间复杂度" class="headerlink" title="算法的时间复杂度"></a>算法的时间复杂度</h2><p>用来度量算法的运行时间，记作: T(n) = O(f(n))。它表示随着 输入大小n 的增大，算法执行需要的时间的增长速度可以用 f(n) 来描述。</p><blockquote><p>如果一个算法的执行次数是 T(n)，那么只保留最高次项，同时忽略最高项的系数后得到函数 f(n)，此时算法的时间复杂度就是 O(f(n))</p></blockquote><ol><li><p>对于一个循环，假设循环体的时间复杂度为 O(n)，循环次数为 m，则这个<br>循环的时间复杂度为 O(n×m)。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">aFunc</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;         <span class="hljs-comment">// 循环次数为 n</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Hello, World!\n"</span>);      <span class="hljs-comment">// 循环体时间复杂度为 O(1)</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>此时时间复杂度为 O(n × 1)，即 O(n).</p></li><li><p>对于多个循环，假设循环体的时间复杂度为 O(n)，各个循环的循环次数分别是a, b, c…，则这个循环的时间复杂度为 O(n×a×b×c…)。分析的时候应该由里向外分析这些循环。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">aFunc</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;         <span class="hljs-comment">// 循环次数为 n</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; n; j++) &#123;       <span class="hljs-comment">// 循环次数为 n</span><br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Hello, World!\n"</span>);      <span class="hljs-comment">// 循环体时间复杂度为 O(1)</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>此时时间复杂度为 O(n × n × 1)，即 O(n^2)。</p></li><li><p>对于顺序执行的语句或者算法，总的时间复杂度等于其中最大的时间复杂度。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">aFunc</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span> </span>&#123;<br>    <span class="hljs-comment">// 第一部分时间复杂度为 O(n^2)</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; n; j++) &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Hello, World!\n"</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// 第二部分时间复杂度为 O(n)</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; n; j++) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Hello, World!\n"</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>此时时间复杂度为 max(O(n^2), O(n))，即 O(n^2)。</p></li><li><p>对于条件判断语句，总的时间复杂度等于其中 时间复杂度最大的路径 的时间复杂度。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">aFunc</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (n &gt;= <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-comment">// 第一条路径时间复杂度为 O(n^2)</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; n; j++) &#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">"输入数据大于等于零\n"</span>);<br>            &#125;<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 第二条路径时间复杂度为 O(n)</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; n; j++) &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">"输入数据小于零\n"</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>此时时间复杂度为 max(O(n^2), O(n))，即 O(n^2)。</p></li></ol><p><strong>时间复杂度分析的基本策略是：从内向外分析，从最深层开始分析。如果遇到函数调用，要深入函数进行分析。</strong></p><h4 id="练习一下"><a href="#练习一下" class="headerlink" title="练习一下"></a>练习一下</h4><ol><li>基础题</li></ol><p>求该方法的时间复杂度</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs matlab">void aFunc(int n) &#123;<br>    <span class="hljs-keyword">for</span> (int <span class="hljs-built_in">i</span> = <span class="hljs-number">0</span>; <span class="hljs-built_in">i</span> &lt; n; <span class="hljs-built_in">i</span>++) &#123;<br>        <span class="hljs-keyword">for</span> (int <span class="hljs-built_in">j</span> = <span class="hljs-built_in">i</span>; <span class="hljs-built_in">j</span> &lt; n; <span class="hljs-built_in">j</span>++) &#123;<br>            printf(<span class="hljs-string">"Hello World\n"</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>参考答案：</p><p>当 i = 0 时，内循环执行 n 次运算，当 i = 1 时，内循环执行 n - 1 次运算……当 i = n - 1 时，内循环执行 1 次运算。</p><p>所以，执行次数 T(n) = n + (n - 1) + (n - 2)……+ 1 = n(n + 1) / 2 = n^2 / 2 + n / 2。<br>根据上文说的 大O推导法 可以知道，此时时间复杂度为 O(n^2)。</p><ol start="2"><li>进阶题</li></ol><p>求该方法的时间复杂度</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">aFunc</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt; n; i++) &#123;<br>        i *= <span class="hljs-number">2</span>;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%i\n"</span>, i);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>参考答案：</p><p>假设循环次数为 t，则循环条件满足 2^t &lt; n。</p><p>可以得出，执行次数t = log(2)(n)，即 T(n) = log(2)(n)，可见时间复杂度为 O(log(2)(n))，即 O(log n)。</p><ol start="3"><li>再次进阶<br>求该方法的时间复杂度<figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">long aFunc(<span class="hljs-built_in">int</span> n) &#123;<br>    <span class="hljs-keyword">if</span> (n &lt;= <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> aFunc(n - <span class="hljs-number">1</span>) + aFunc(n - <span class="hljs-number">2</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>参考答案：</li></ol><p>显然运行次数，T(0) = T(1) = 1，同时 T(n) = T(n - 1) + T(n - 2) + 1，这里的 1 是其中的加法算一次执行。</p><p>显然 T(n) = T(n - 1) + T(n - 2) 是一个斐波那契数列，通过归纳证明法可以证明，当 n &gt;= 1 时 T(n) &lt; (5/3)^n，同时当 n &gt; 4 时 T(n) &gt;= (3/2)^n。</p><p>所以该方法的时间复杂度可以表示为 O((5/3)^n)，简化后为 O(2^n)。可见这个方法所需的运行时间是以指数的速度增长的。如果大家感兴趣，可以试下分别用 1，10，100 的输入大小来测试下算法的运行时间。</p><h4 id="总结如下，时间复杂度由低到高"><a href="#总结如下，时间复杂度由低到高" class="headerlink" title="总结如下，时间复杂度由低到高:"></a>总结如下，时间复杂度由低到高:</h4><table><thead><tr><th>执行次数函数</th><th>阶</th><th>名称</th></tr></thead><tbody><tr><td>3</td><td>O(1)</td><td>常数阶</td></tr><tr><td>5log2n+2</td><td>O(logN)</td><td>对数阶</td></tr><tr><td>2n+3</td><td>O(n)</td><td>线性阶</td></tr><tr><td>2n+3nlog2n+1</td><td>O(nlogn)</td><td>nlog2n阶</td></tr><tr><td>3n^2+2n+1</td><td>O(n²))</td><td>平方阶</td></tr><tr><td>6n^3+2n^2+3n+4</td><td>O(n³)</td><td>立方阶</td></tr><tr><td>2^n</td><td>O(2^n)</td><td>指数阶</td></tr><tr><td>n!</td><td>O(n!)</td><td>阶乘阶</td></tr><tr><td>n^n</td><td>O(n^n)</td><td>n^n指数阶</td></tr></tbody></table><h4 id="时间复杂度和运行时间关系图"><a href="#时间复杂度和运行时间关系图" class="headerlink" title="时间复杂度和运行时间关系图"></a>时间复杂度和运行时间关系图</h4><p><img src="https://s1.ax1x.com/2020/10/01/0Kv8BD.png" alt="0Kv8BD.png"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;算法的时间复杂度&quot;&gt;&lt;a href=&quot;#算法的时间复杂度&quot; class=&quot;headerlink&quot; title=&quot;算法的时间复杂度&quot;&gt;&lt;/a&gt;算法的时间复杂度&lt;/h2&gt;&lt;p&gt;用来度量算法的运行时间，记作: T(n) = O(f(n))。它表示随着 输入大小n 的增大
      
    
    </summary>
    
    
      <category term="Data Structure" scheme="http://yoursite.com/categories/Data-Structure/"/>
    
    
      <category term="Complexity" scheme="http://yoursite.com/tags/Complexity/"/>
    
  </entry>
  
  <entry>
    <title>Cheat Sheet</title>
    <link href="http://yoursite.com/2020/05/19/CheatSheet/"/>
    <id>http://yoursite.com/2020/05/19/CheatSheet/</id>
    <published>2020-05-19T13:34:31.000Z</published>
    <updated>2020-05-21T04:07:56.796Z</updated>
    
    <content type="html"><![CDATA[<h1 id="在文件中查找字符串"><a href="#在文件中查找字符串" class="headerlink" title="在文件中查找字符串"></a>在文件中查找字符串</h1><h2 id="find"><a href="#find" class="headerlink" title="find"></a>find</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs markdown">C:\Users\&gt;find /?<br>在文件中搜索字符串。<br><br>FIND [<span class="hljs-string">/V</span>] [<span class="hljs-string">/C</span>] [<span class="hljs-string">/N</span>] [<span class="hljs-string">/I</span>] [<span class="hljs-string">/OFF[LINE</span>]] "string" [<span class="hljs-string">[drive:</span>][<span class="hljs-symbol">path</span>]filename[ ...]]<br><br>  /V         显示所有未包含指定字符串的行。<br>  /C         仅显示包含字符串的行数。<br>  /N         显示行号。<br>  /I         搜索字符串时忽略大小写。<br>  /OFF[LINE] 不要跳过具有脱机属性集的文件。<br>  "string" 指定要搜索的文本字符串。<br>  [<span class="hljs-string">drive:</span>][<span class="hljs-symbol">path</span>]filename 指定要搜索的文件。<br><br> /?          在命令提示符显示帮助。<br></code></pre></td></tr></table></figure><p>例如：<br>要从Pencil.ad 显示包含字符串“Pencil Sharpener”的所有行，请键入：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-builtin-name">find</span> <span class="hljs-string">"Pencil Sharpener"</span> pencil.ad<br></code></pre></td></tr></table></figure><p>比如在D盘根目录下的文本文件test.txt中查找含有 abcd这一字符串的所有行。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-builtin-name">find</span> <span class="hljs-string">"abcd"</span> d:\test.txt<br></code></pre></td></tr></table></figure><h2 id="findstr"><a href="#findstr" class="headerlink" title="findstr"></a>findstr</h2><p>假设您想要找到当前目录和所有子目录中每个包含“computer”这个单词的文件，而不考虑字母的大小写。要列出包含单词“computer”的所有文件，请键入</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">findstr <span class="hljs-string">/s</span> <span class="hljs-string">/i</span> <span class="hljs-string">/m</span> <span class="hljs-string">"\&lt;computer\&gt;"</span> *.*<br></code></pre></td></tr></table></figure><p>当你不知道在哪一个具体的文件中搜索指定字符串的时候，一般命令的格式是这样的：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">findstr <span class="hljs-string">/s</span> <span class="hljs-string">/i</span> <span class="hljs-string">/n</span>  <span class="hljs-string">"abc"</span>  *.*<br></code></pre></td></tr></table></figure><p>意思就是（/s）–&gt;在当前目录及其子目录中的 (<em>.</em>) —&gt;所有格式文件 中搜索含有字符串abc的行 (/i)–&gt;搜索忽略字符串中字母的大小写 (/n)–&gt;并显示改行的行号。</p><h1 id="Remote-Debugging-with-Eclipse-WebSphere-7"><a href="#Remote-Debugging-with-Eclipse-WebSphere-7" class="headerlink" title="Remote Debugging with Eclipse + WebSphere 7"></a>Remote Debugging with Eclipse + WebSphere 7</h1><p><a href="https://mkyong.com/websphere/remote-debugging-with-eclipse-websphere-7/" target="_blank" rel="noopener">https://mkyong.com/websphere/remote-debugging-with-eclipse-websphere-7/</a></p><h1 id="破解工作表加密"><a href="#破解工作表加密" class="headerlink" title="破解工作表加密"></a>破解工作表加密</h1><p><a href="https://zhuanlan.zhihu.com/p/26440785" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/26440785</a></p><h1 id="Json-Formatter"><a href="#Json-Formatter" class="headerlink" title="Json Formatter"></a>Json Formatter</h1><p><a href="https://jsonformatter.org/" target="_blank" rel="noopener">https://jsonformatter.org/</a></p><h1 id="MacOS-软件下载"><a href="#MacOS-软件下载" class="headerlink" title="MacOS 软件下载"></a>MacOS 软件下载</h1><p><a href="https://xclient.info/" target="_blank" rel="noopener">https://xclient.info/</a></p><h1 id="重启Win10电脑打印机服务"><a href="#重启Win10电脑打印机服务" class="headerlink" title="重启Win10电脑打印机服务"></a>重启Win10电脑打印机服务</h1><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dos"><span class="hljs-built_in">net</span> stop spooler<br><br><span class="hljs-built_in">net</span> <span class="hljs-built_in">start</span> spooler<br></code></pre></td></tr></table></figure><h1 id="海量电脑桌面-可选分辨率"><a href="#海量电脑桌面-可选分辨率" class="headerlink" title="海量电脑桌面(可选分辨率)"></a>海量电脑桌面(可选分辨率)</h1><p><a href="https://alphacoders.com/" target="_blank" rel="noopener">https://alphacoders.com/</a></p><p><a href="https://www.wallpaperflare.com/" target="_blank" rel="noopener">https://www.wallpaperflare.com/</a></p><h1 id="无水印高清图"><a href="#无水印高清图" class="headerlink" title="无水印高清图"></a>无水印高清图</h1><p><a href="https://unsplash.com/t/textures-patterns" target="_blank" rel="noopener">https://unsplash.com/t/textures-patterns</a></p><h1 id="好用API合集网站"><a href="#好用API合集网站" class="headerlink" title="好用API合集网站"></a>好用API合集网站</h1><p><a href="https://api.btstu.cn/" target="_blank" rel="noopener">https://api.btstu.cn/</a></p><h1 id="API随机图片"><a href="#API随机图片" class="headerlink" title="API随机图片"></a>API随机图片</h1><p><a href="https://source.unsplash.com/" target="_blank" rel="noopener">https://source.unsplash.com/</a></p><h1 id="通过链接下载视频"><a href="#通过链接下载视频" class="headerlink" title="通过链接下载视频"></a>通过链接下载视频</h1><p><a href="https://www.urlgot.com/" target="_blank" rel="noopener">https://www.urlgot.com/</a></p><h1 id="eclipse解决egit-lock-fail-fetch时"><a href="#eclipse解决egit-lock-fail-fetch时" class="headerlink" title="eclipse解决egit lock fail(fetch时)"></a>eclipse解决egit lock fail(fetch时)</h1><p><a href="https://stackoverflow.com/questions/49859734/egit-lock-fail-eclipse/51058122" target="_blank" rel="noopener">https://stackoverflow.com/questions/49859734/egit-lock-fail-eclipse/51058122</a></p><h1 id="微信朋友圈生成器"><a href="#微信朋友圈生成器" class="headerlink" title="微信朋友圈生成器"></a>微信朋友圈生成器</h1><p><a href="https://www.chatfaker.com/zh-cn/index.html#home" target="_blank" rel="noopener">https://www.chatfaker.com/zh-cn/index.html#home</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;在文件中查找字符串&quot;&gt;&lt;a href=&quot;#在文件中查找字符串&quot; class=&quot;headerlink&quot; title=&quot;在文件中查找字符串&quot;&gt;&lt;/a&gt;在文件中查找字符串&lt;/h1&gt;&lt;h2 id=&quot;find&quot;&gt;&lt;a href=&quot;#find&quot; class=&quot;headerli
      
    
    </summary>
    
    
      <category term="Cheat" scheme="http://yoursite.com/categories/Cheat/"/>
    
    
      <category term="Cheat" scheme="http://yoursite.com/tags/Cheat/"/>
    
  </entry>
  
  <entry>
    <title>Docker概念梳理</title>
    <link href="http://yoursite.com/2020/05/07/Docker%E6%A6%82%E5%BF%B5%E6%A2%B3%E7%90%86/"/>
    <id>http://yoursite.com/2020/05/07/Docker%E6%A6%82%E5%BF%B5%E6%A2%B3%E7%90%86/</id>
    <published>2020-05-06T16:00:00.000Z</published>
    <updated>2020-05-08T12:06:27.695Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Docker好处"><a href="#Docker好处" class="headerlink" title="Docker好处:"></a>Docker好处:</h3><ul><li><strong>一致的运行环境</strong> Docker 的镜像提供了==除内核外==完整的运行时环境，确保了应用运行环境一致性.</li><li><strong>更快速的启动时间</strong> 可以做到秒级、甚至毫秒级的启动时间。</li><li><strong>隔离性</strong> 避免公用的服务器，资源会容易受到其他用户的影响.</li><li><strong>弹性伸缩，快速扩展</strong> 善于处理集中爆发的服务器使用压力.</li><li><strong>迁移方便</strong> 可以很轻易的将在一个平台上运行的应用，迁移到另一个平台上，而不用担心运行环境的变化导致应用无法正常运行的情况。</li><li><strong>持续交付和部署</strong> 使用 Docker 可以通过定制应用镜像来实现持续集成、持续交付、部署。</li></ul><h3 id="Docker基本概念"><a href="#Docker基本概念" class="headerlink" title="Docker基本概念"></a>Docker基本概念</h3><ul><li><a href="#Repository">仓库</a>（Repository）</li><li><a href="#Image">镜像</a>（Image）</li><li><a href="#Container">容器</a>（Container）</li><li><a href="#Dockerfile">Dockerfile</a>（Dockerfile）</li><li><a href="#DockerCompose">Docker Compose</a>（Docker Compose）</li></ul><p><img src="https://s1.ax1x.com/2020/05/07/Yeowu9.jpg" alt=""></p><h4 id="仓库"><a href="#仓库" class="headerlink" title="仓库"></a><span id = "Repository">仓库</span></h4><p>集中存放镜像文件的地方。比如：DockerHub</p><h4 id="镜像"><a href="#镜像" class="headerlink" title="镜像"></a><span id = "Image">镜像</span></h4><p>一个特殊的文件系统，除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数（如匿名卷、环境变量、用户等）。 镜像不包含任何动态数据，其内容在构建之后也不会被改变。</p><p>镜像构建时，会一层层构建，前一层是后一层的基础。每一层构建完就不会再发生改变，后一层上的任何改变只发生在自己这一层。</p><p>有基础镜像，仅仅包含操作系统，比如centos镜像；有中间件镜像，比如redis等数据库镜像；最后是应用镜像，就是指具体的应用服务了，应用镜像可以非常丰富，随时可以发布，这三者之间依次叠加。</p><h4 id="容器"><a href="#容器" class="headerlink" title="容器"></a><span id = "Container">容器</span></h4><p>镜像（Image）和容器（Container）的关系，就像是面向对象程序设计中的 类 和 实例 一样，镜像是静态的定义，容器是镜像运行时的实体。</p><p>容器存储层的生存周期和容器一样，容器消亡时，容器存储层也随之消亡。因此，任何保存于容器存储层的信息都会随容器删除而丢失。</p><p>容器不应该向其存储层内写入任何数据，容器存储层要保持无状态化。所有的文件写入操作，都应该使用数据卷（Volume）、或者绑定宿主目录，在这些位置的读写会跳过容器存储层，直接对宿主(或网络存储)发生读写，其性能和稳定性更高。数据卷的生存周期独立于容器，容器消亡，数据卷不会消亡。因此，使用数据卷后，容器可以随意删除、重新 run ，数据却不会丢失。</p><p>打个比方，你首先下载了一个Ubuntu的镜像，然后又安装mysql和Django应用及其依赖，来完成对它Ubutun镜像的修改，一个个人觉得非常完美应用镜像生成了！就把这个镜像分享给大家使用，大家通过这个镜像就生成一个容器。容器启动之后就会运行Django服务了。<br><img src="https://s1.ax1x.com/2020/05/07/YeTFv4.png" alt=""></p><p>容器就是一个个独立的封闭的集装箱，但是也需要对外提供服务的，所以Docker允许公开容器的特定端口，在启动Docker的时候，我们就可以将容器的特定端口映射到宿主机上面的任意一个端口，所以，如果几个服务都需要80端口，那么容器的对外端口是80，但是映射到宿主机上面就是任意端口，就不会产生冲突，所以就不需要通过代理来解决冲突。容器对外端口与宿主机的端口映射可以通过下面的命令来完成。</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs applescript">docker <span class="hljs-built_in">run</span> -d -p <span class="hljs-number">8081</span>:<span class="hljs-number">80</span> <span class="hljs-comment">--name 容器名 镜像名</span><br><br> -d 守护容器，就是后台运行，退出命令窗口容器也不会停止<br> -<span class="hljs-keyword">it</span> 交互式容器 退出命令窗口容器就停止运行了<br> -p 宿主机端口和容器端口映射<br></code></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2020/05/07/YeTM8O.png" alt=""></p><h4 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a><span id = "Dockerfile">Dockerfile</span></h4><p>一个文本文件，用来配置 image。</p><figure class="highlight Docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Docker"><span class="hljs-comment"># Dockerfile</span><br><br><span class="hljs-keyword">FROM</span> ubuntu:<span class="hljs-number">16.04</span><br><br><span class="hljs-keyword">RUN</span><span class="bash"> apt-get update</span><br><br><span class="hljs-keyword">RUN</span><span class="bash"> apt-get install -y vim</span><br><br><span class="hljs-comment"># 告诉Docker默认启动命令</span><br><span class="hljs-keyword">CMD</span><span class="bash">[<span class="hljs-string">"sh"</span>]</span><br></code></pre></td></tr></table></figure><h4 id="Docker-Compose"><a href="#Docker-Compose" class="headerlink" title="Docker Compose"></a><span id = "DockerCompose">Docker Compose</span></h4><p>Compose 是用于定义和运行多容器 Docker 应用程序的工具。通过 Compose，您可以使用 YML 文件来配置应用程序需要的所有服务。然后，使用一个命令，就可以从 YML 文件配置中创建并启动所有服务。</p><p>docker-compose是编排容器的。例如，你有一个php镜像，一个mysql镜像，一个nginx镜像。如果没有docker-compose，那么每次启动的时候，你需要敲各个容器的启动参数，环境变量，容器命名，指定不同容器的链接参数等等一系列的操作，相当繁琐。而用了docker-composer之后，你就可以把这些命令一次性写在docker-composer.yml文件中，以后每次启动这一整个环境（含3个容器）的时候，你只要敲一个docker-composer up命令就ok了</p><p>Compose 使用的三个步骤：</p><ol><li>使用 Dockerfile 定义应用程序的环境。</li><li>使用 docker-compose.yml 定义构成应用程序的服务，这样它们可以在隔离环境中一起运行。</li><li>最后，执行 docker-compose up 命令来启动并运行整个应用程序。</li></ol><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-meta"># yaml 配置实例</span><br><span class="hljs-symbol">version:</span> <span class="hljs-string">'3'</span><br><span class="hljs-symbol">services:</span><br><span class="hljs-symbol">  web:</span><br><span class="hljs-symbol">    build:</span> .<br><span class="hljs-symbol">    ports:</span><br>   - <span class="hljs-string">"5000:5000"</span><br><span class="hljs-symbol">    volumes:</span><br>   - .:/code<br>    - logvolume01:<span class="hljs-meta-keyword">/var/</span>log<br><span class="hljs-symbol">    links:</span><br>   - redis<br><span class="hljs-symbol">  redis:</span><br><span class="hljs-symbol">    image:</span> redis<br><span class="hljs-symbol">volumes:</span><br><span class="hljs-symbol">  logvolume01:</span> &#123;&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Docker好处&quot;&gt;&lt;a href=&quot;#Docker好处&quot; class=&quot;headerlink&quot; title=&quot;Docker好处:&quot;&gt;&lt;/a&gt;Docker好处:&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;一致的运行环境&lt;/strong&gt; Docker 的镜像提供了
      
    
    </summary>
    
    
      <category term="Learn" scheme="http://yoursite.com/categories/Learn/"/>
    
    
      <category term="Docker" scheme="http://yoursite.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Docker与持续集成</title>
    <link href="http://yoursite.com/2020/05/07/Docker%E4%B8%8E%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/"/>
    <id>http://yoursite.com/2020/05/07/Docker%E4%B8%8E%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/</id>
    <published>2020-05-06T16:00:00.000Z</published>
    <updated>2020-05-07T14:35:19.773Z</updated>
    
    <content type="html"><![CDATA[<p>持续集成和自动部署的原理如下图所示：<br><img src="https://s1.ax1x.com/2020/05/07/Ye7HXQ.png" alt=""></p><ol><li>RD推送代码到git 仓库或者svn等代码服务器上面，git服务器就会通过hook通知jenkins。</li><li>jenkine 克隆git代码到本地，并通过dockerFile文件进行编译 。</li><li>打包生成一个新版本的镜像并推送到仓库 ，删除当前容器 ，通过新版本镜像重新运行。</li><li>而在整个过程中 RD只需要敲入三个命令Git add * ;Git commit –m “”;Git push即可完成持续集成、自动交付、自动部署。</li></ol><p>Docker还可以很方便的自动扩容哦，一般的自动扩容的两种方式，一种就是docker容量扩大，另一种就是docker节点数扩充。第一种就修改配置文件即可，第二种通过简单的拷贝，运行就完成了节点的扩容。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;持续集成和自动部署的原理如下图所示：&lt;br&gt;&lt;img src=&quot;https://s1.ax1x.com/2020/05/07/Ye7HXQ.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;RD推送代码到git 仓库或者svn等代码服务器上面，git服务器就会通过hook
      
    
    </summary>
    
    
      <category term="Learn" scheme="http://yoursite.com/categories/Learn/"/>
    
    
      <category term="Docker" scheme="http://yoursite.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Workaround for oracle weblogic install error —— Cyclic dependency detected among featureset libraries</title>
    <link href="http://yoursite.com/2020/02/03/Workaround%20for%20oracle%20weblogic%20install%20error/"/>
    <id>http://yoursite.com/2020/02/03/Workaround%20for%20oracle%20weblogic%20install%20error/</id>
    <published>2020-02-03T03:26:38.000Z</published>
    <updated>2020-05-08T16:26:44.690Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Brief"><a href="#Brief" class="headerlink" title="Brief"></a>Brief</h3><p>This is the workaround for resolving errors during weblogic installation, below are details and resolving steps.</p><h3 id="1-Problem-description"><a href="#1-Problem-description" class="headerlink" title="1. Problem description"></a>1. Problem description</h3><p>When installing weblogic 12.2.1.4, we may facing the problem during progress ‘Generating Libraries’.</p><p><img src="https://s2.ax1x.com/2020/02/03/1NfFh9.png" alt=""></p><p>The error message is </p><blockquote><p>java.lang.Exception: oracle.sysman.oii.oiif.oiifb.OiifbEndIterateException:<br>com.oracle.cie.gdr.libraries.LibraryHandlerException:<br>Cyclic dependency detected among featureset libraries:<br>[C:\Oracle\Middleware\Oracle_Home\server\lib\wljmsclient.jar,<br>C:\Oracle\Middleware\Oracle_Home\server\lib\wljmxclient.jar]</p></blockquote><h3 id="2-Resolving-steps"><a href="#2-Resolving-steps" class="headerlink" title="2. Resolving steps"></a>2. Resolving steps</h3><blockquote><p>This workaround is a <strong><em>Trick</em></strong> to skip Cyclic dependency check for ‘wljmsclient.jar’ and ‘wljmxclient.jar’, after the installation completed, add back these two libraries.</p></blockquote><ol><li>Go to the install package folder.</li></ol><p><img src="https://s2.ax1x.com/2020/02/03/1Nhfqf.png" alt=""></p><ol start="2"><li>Unzip the jar file.</li></ol><p><img src="https://s2.ax1x.com/2020/02/03/1NhLMq.png" alt=""></p><ol start="3"><li>Using command line to retrieve string ‘wljmsclient.jar’, ‘wljmxclient.jar’ under the extract folder to get details about this two libraries.<figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">findstr <span class="hljs-string">/s</span> <span class="hljs-string">/i</span> <span class="hljs-string">/n</span> <span class="hljs-string">"wljmsclient.jar"</span> *.*<br><br>findstr <span class="hljs-string">/s</span> <span class="hljs-string">/i</span> <span class="hljs-string">/n</span> <span class="hljs-string">"wljmxclient.jar"</span> *.*<br></code></pre></td></tr></table></figure>We can find out that the libraries are referenced in <strong><em>wls_sharedLibraries_12.2.1.4.0.xml</em></strong> under folder <strong><em>~\Disk1\stage\featuresets</em></strong></li></ol><p><img src="https://s2.ax1x.com/2020/02/03/1NhzoF.png" alt=""></p><ol start="4"><li>Go to folder <strong><em>~\Disk1\stage\featuresets</em></strong> and find file <strong><em>wls_sharedLibraries_12.2.1.4.0.xml</em></strong></li></ol><p><img src="https://s2.ax1x.com/2020/02/03/1N4VeK.png" alt=""></p><ol start="5"><li>Open the file <strong><em>wls_sharedLibraries_12.2.1.4.0.xml</em></strong> and find lines for libraries ‘wljmsclient.jar’, ‘wljmxclient.jar’.</li></ol><p><img src="https://s2.ax1x.com/2020/02/03/1N4Jw8.png" alt=""></p><ol start="6"><li>Commented out these lines in xml and save the xml.</li></ol><p><img src="https://s2.ax1x.com/2020/02/03/1N4DO0.png" alt=""></p><ol start="7"><li>Go back to folder <strong><em>~\Disk1\install</em></strong>, run the <strong><em>.ng.cmd</em></strong> script as administrator</li></ol><p><img src="https://s2.ax1x.com/2020/02/03/1N5Jj1.png" alt=""></p><p>The installation cmd is running </p><p><img src="https://s2.ax1x.com/2020/02/03/1NIS29.png" alt=""></p><ol start="8"><li>The weblogic installer will be launched and follow the installation steps. </li></ol><p><img src="https://s2.ax1x.com/2020/02/03/1NIpvR.png" alt=""></p><ol start="9"><li>Installation completed successfully.</li></ol><p><img src="https://s2.ax1x.com/2020/02/03/1NIBZV.png" alt=""></p><ol start="10"><li>Go to the target folder, find <strong><em>wls_sharedLibraries_12.2.1.4.0.xml</em></strong> under <strong><em>~/Oracle/Middleware/Oracle_Home/inventory/featuresets</em></strong></li></ol><p><img src="https://s2.ax1x.com/2020/02/03/1NoUYD.png" alt=""></p><ol start="11"><li>Open <strong><em>wls_sharedLibraries_12.2.1.4.0.xml</em></strong> and we can find out that libraries info for ‘wljmsclient.jar’, ‘wljmxclient.jar’ are not there (Because we commnet out the code when installation).</li></ol><p><img src="https://s2.ax1x.com/2020/02/03/1Nohlj.png" alt=""></p><ol start="12"><li>Add these info back.</li></ol><p><img src="https://s2.ax1x.com/2020/02/03/1NT83Q.png" alt=""></p><ol start="13"><li>Go to  <strong><em>~/Oracle/Middleware/Oracle_Home/wlserver/server/lib</em></strong></li></ol><p><img src="https://s2.ax1x.com/2020/02/03/1NTJjs.png" alt=""></p><ol start="14"><li>Compared with <strong><em>successfully installed case</em></strong>, we can know that libraries ‘wlclient.jar’ and ‘wljmxclient.jar’ are missing due to the comment out code. Add these two libraries back to folder. </li></ol><p><img src="https://s2.ax1x.com/2020/02/03/1NTz8g.png" alt=""></p><ol start="15"><li><p>I copied these two libraries from a <strong><em>successfully installed case</em></strong>, because I installed weblogic in several machines and only some of them have this  Cyclic dependency check problem, if you don’t have these two libraries in your hands, you can get them from internet.</p><blockquote><p><a href="http://find-files.com/" target="_blank" rel="noopener">http://find-files.com/</a></p></blockquote></li><li><p><strong>Done</strong>.</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Brief&quot;&gt;&lt;a href=&quot;#Brief&quot; class=&quot;headerlink&quot; title=&quot;Brief&quot;&gt;&lt;/a&gt;Brief&lt;/h3&gt;&lt;p&gt;This is the workaround for resolving errors during weblogi
      
    
    </summary>
    
    
      <category term="workaround" scheme="http://yoursite.com/categories/workaround/"/>
    
    
      <category term="Weblogic" scheme="http://yoursite.com/tags/Weblogic/"/>
    
  </entry>
  
  <entry>
    <title>Hexo + GitPages Blog Tutorial(教程)</title>
    <link href="http://yoursite.com/2019/12/19/Hexo-GitPages-Blog-Tutorial-%E6%95%99%E7%A8%8B/"/>
    <id>http://yoursite.com/2019/12/19/Hexo-GitPages-Blog-Tutorial-%E6%95%99%E7%A8%8B/</id>
    <published>2019-12-19T14:00:22.000Z</published>
    <updated>2020-05-07T14:36:34.209Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Brief"><a href="#Brief" class="headerlink" title="Brief"></a>Brief</h2><p>This tutorial is for building free static blogs by using Hexo and Github Pages. We will start at environments set up, customise blog pages, add source project in version control and install plugins for futher features like comments.</p><h3 id="What-is-Hexo"><a href="#What-is-Hexo" class="headerlink" title="What is Hexo"></a>What is Hexo</h3><p>Hexo is a fast, simple and powerful blog framework. You write posts in <a href="https://en.wikipedia.org/wiki/Markdown" target="_blank" rel="noopener">Markdown</a> (or other markup languages) and <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a> generates static files with a beautiful theme in seconds.</p><h3 id="What-is-Github-Pages"><a href="#What-is-Github-Pages" class="headerlink" title="What is Github Pages"></a>What is Github Pages</h3><p><a href="https://en.wikipedia.org/wiki/GitHub#GitHub_Pages" target="_blank" rel="noopener">GitHub Pages</a> is a static web hosting service offered by GitHub since 2008 to GitHub users for hosting user blogs, project documentation, or even whole books created as a page.</p><h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><p>It only takes less than one hour to set up enviroments and get your first blog page deployed. If you encounter a problem, please refer <a href="https://hexo.io/docs/" target="_blank" rel="noopener">https://hexo.io/docs/</a></p><h3 id="Requirements"><a href="#Requirements" class="headerlink" title="Requirements"></a>Requirements</h3><ul><li>Git</li><li>Node.js</li></ul><p>If your computer already has these, congratulations! You can skip to the <a href="#installHexo">install Hexo</a> step.</p><h3 id="Install-Git"><a href="#Install-Git" class="headerlink" title="Install Git"></a>Install Git</h3><ul><li>Windows: Download &amp; install <a href="https://git-scm.com/download/win" target="_blank" rel="noopener">git</a>.</li><li>Mac: Install it with <a href="https://brew.sh/" target="_blank" rel="noopener">Homebrew</a>, <a href="http://www.macports.org/" target="_blank" rel="noopener">MacPorts</a> or <a href="http://www.macports.org/" target="_blank" rel="noopener">installer</a>.</li><li>Linux (Ubuntu, Debian):<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">sudo apt-<span class="hljs-builtin-name">get</span> install git-core<br></code></pre></td></tr></table></figure></li><li>Linux (Fedora, Red Hat, CentOS):<figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">sudo yum <span class="hljs-keyword">install</span> git-core<br></code></pre></td></tr></table></figure></li></ul><p>Run CMD check git was installed successfully: <code>git --version</code></p><p><img src="https://s2.ax1x.com/2019/12/19/QquIcd.png" alt=""></p><h3 id="Generate-SSH-Key-for-Github"><a href="#Generate-SSH-Key-for-Github" class="headerlink" title="Generate SSH Key for Github"></a>Generate SSH Key for Github</h3><p>Run git bash from Menu</p><p><img src="https://s2.ax1x.com/2019/12/19/QLZN9J.png" alt=""></p><p>Config your git global settings:</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">git<span class="hljs-built_in"> config </span>--global user.name <span class="hljs-string">"your GitHub username"</span><br>git<span class="hljs-built_in"> config </span>--global user.email <span class="hljs-string">"your GitHub regist email"</span><br></code></pre></td></tr></table></figure><p>Generate ssh key:</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs excel">ssh-keygen -<span class="hljs-built_in">t</span> rsa -C <span class="hljs-string">"your GitHub regist email"</span><br></code></pre></td></tr></table></figure><p>Press ‘Enter’ three times, no need password by default, find id_rsa.pub key in generated .ssh folder, copy the whole content in this file.</p><p><a href="https://imgchr.com/i/QLmgOI" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/12/19/QLmgOI.md.jpg" alt=""></a></p><p>Go to github <a href="https://github.com/settings/keys" target="_blank" rel="noopener">setting keys page</a>, click New SSH Key</p><p><a href="https://imgchr.com/i/QLmNO1" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/12/19/QLmNO1.md.png" alt=""></a></p><p>Title can be any value, copy the content of id_rsa.pub into Key, then click Add SSH Key.</p><p>Go to git bash, use command <code>ssh git@github.com</code> to verify the key is successfully configured:</p><p><a href="https://imgchr.com/i/QLn64U" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/12/19/QLn64U.md.png" alt=""></a></p><h3 id="Install-Node-js"><a href="#Install-Node-js" class="headerlink" title="Install Node.js"></a>Install Node.js</h3><p>Node.js <a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">Official Installer</a></p><blockquote><h4 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h4><p>If you use the official installer, make sure Add to PATH is checked (it’s checked by default).</p></blockquote><blockquote><h4 id="Mac-Linux"><a href="#Mac-Linux" class="headerlink" title="Mac / Linux"></a>Mac / Linux</h4><p>If you encounter EACCES permission error when trying to install Hexo, please follow the <a href="https://docs.npmjs.com/resolving-eacces-permissions-errors-when-installing-packages-globally" target="_blank" rel="noopener">workaround</a> provided by npmjs; overriding with root/sudo is highly discouraged.</p></blockquote><p>Run CMD check node.js was installed successfully: <code>node -v</code></p><p><img src="https://s2.ax1x.com/2019/12/19/QqKdbt.png" alt=""></p><p>npm will be installed by default when installing node.js, if not, please install npm also.</p><p>Run CMD check npm was installed successfully: <code>npm -v</code></p><p><img src="https://s2.ax1x.com/2019/12/19/QqMFsA.png" alt=""></p><h3 id="Install-Hexo"><a href="#Install-Hexo" class="headerlink" title="Install Hexo"></a><span id="installHexo">Install Hexo</span></h3><p>Once all the requirements are installed, you can start to install Hexo.</p><ol><li>Create a folder in your local PC, we will install Hexo frame in this folder and the blog pages will also be published in this folder.</li></ol><p><img src="https://s2.ax1x.com/2019/12/19/QqQPYT.png" alt=""></p><ol start="2"><li><code>Shift + right click</code> in &lt;==MyBlog==&gt; folder. Open command window here.</li></ol><p><img src="https://s2.ax1x.com/2019/12/19/Qqa2fs.jpg" alt=""></p><p>3.Use npm command to install Hexo:</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">npm install -g hexo-<span class="hljs-keyword">cli</span><br></code></pre></td></tr></table></figure><h3 id="Init-Blog-Files"><a href="#Init-Blog-Files" class="headerlink" title="Init Blog Files"></a>Init Blog Files</h3><p>After the installation finished. Use following command in same &lt;==MyBlog==&gt; folder to init blog:</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo init blog</span><br></code></pre></td></tr></table></figure><p>Using following commands to verify the generated blog files</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">hexo</span> <span class="hljs-string">new test_my_site</span><br><br><span class="hljs-attr">hexo</span> <span class="hljs-string">g</span><br><br><span class="hljs-attr">hexo</span> <span class="hljs-string">s</span><br></code></pre></td></tr></table></figure><p><a href="https://imgchr.com/i/QLPVzV" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/12/19/QLPVzV.md.png" alt=""></a></p><p>The blog will run on local server, we can preview it on browser <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a></p><p><a href="https://imgchr.com/i/QLFFg0" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/12/19/QLFFg0.md.png" alt=""></a></p><h3 id="Create-Github-Repository"><a href="#Create-Github-Repository" class="headerlink" title="Create Github Repository"></a>Create Github Repository</h3><p>We need to create one Github Pages repository for deploying blog web files. Login github, create a new repository,</p><p><a href="https://imgchr.com/i/QLESED" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/12/19/QLESED.md.png" alt=""></a></p><p>The ==<username>== in repository name must be exactly same as highlighted your login name:</p><p><a href="https://imgchr.com/i/QLEFgI" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/12/19/QLEFgI.md.png" alt=""></a></p><p>When the repository is created, go to repository settings:</p><p><a href="https://imgchr.com/i/QLuzQJ" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/12/19/QLuzQJ.md.png" alt=""></a></p><p>Scroll down the page, config source branch abd choose a theme:</p><p><a href="https://imgchr.com/i/QLKnOA" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/12/19/QLKnOA.md.png" alt=""></a></p><p>By click the provided link, you can view your github pages in browser.</p><h3 id="Deploy-blog-to-Github-Pages"><a href="#Deploy-blog-to-Github-Pages" class="headerlink" title="Deploy blog to Github Pages"></a>Deploy blog to Github Pages</h3><p>Open the <code>_config.yml</code> file under your blog root folder, update the deploy config as follow:</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-attribute">deploy</span>:<br>  <span class="hljs-attribute">type</span>: git<br>  <span class="hljs-attribute">repository</span>: <span class="hljs-attribute">https</span>:<span class="hljs-comment">//github.com/username/username.github.io.git</span><br>  <span class="hljs-attribute">branch</span>: master<br></code></pre></td></tr></table></figure><p>Run CMD in this folder, using npm command to install deployment plugins:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">npm <span class="hljs-keyword">install</span> hexo-deployer-git <span class="hljs-comment">--save</span><br></code></pre></td></tr></table></figure><p>Then using following three hexo commands to deploy your blog on your github pages:</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">hexo</span> <span class="hljs-string">clean </span><br><span class="hljs-attr">hexo</span> <span class="hljs-string">g </span><br><span class="hljs-attr">hexo</span> <span class="hljs-string">d</span><br></code></pre></td></tr></table></figure><p>Finally, your can access your blog by url:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">username</span><span class="hljs-selector-class">.github</span><span class="hljs-selector-class">.io</span><br></code></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Brief&quot;&gt;&lt;a href=&quot;#Brief&quot; class=&quot;headerlink&quot; title=&quot;Brief&quot;&gt;&lt;/a&gt;Brief&lt;/h2&gt;&lt;p&gt;This tutorial is for building free static blogs by using H
      
    
    </summary>
    
    
      <category term="Blog" scheme="http://yoursite.com/categories/Blog/"/>
    
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
  </entry>
  
</feed>
