<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jack Shang&#39;s Zone</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-05-27T14:09:08.255Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Jack Shang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>PythonIntegers</title>
    <link href="http://yoursite.com/2020/05/27/PythonIntegers/"/>
    <id>http://yoursite.com/2020/05/27/PythonIntegers/</id>
    <published>2020-05-27T14:01:50.000Z</published>
    <updated>2020-05-27T14:09:08.255Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python-Integers"><a href="#Python-Integers" class="headerlink" title="Python Integers"></a>Python Integers</h1><p>Python integer don’t have long limit.</p><h1 id="Python-Strings"><a href="#Python-Strings" class="headerlink" title="Python Strings"></a>Python Strings</h1><p>print默认是打印一行，结尾加换行。end=’ ‘意思是末尾不换行，加空格。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">print(<span class="hljs-string">'='</span>, end =<span class="hljs-string">' '</span>)<br></code></pre></td></tr></table></figure><p>Rearrangement</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">print(<span class="hljs-string">'&#123;1&#125;,&#123;0&#125;'</span>.format(<span class="hljs-string">'one'</span>,<span class="hljs-string">'two'</span>)) <span class="hljs-comment"># result 'two,one'</span><br></code></pre></td></tr></table></figure><p>Different parameter</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">print(<span class="hljs-string">'&#123;&#125;,&#123;&#125;'</span>.format(<span class="hljs-string">'one'</span>,<span class="hljs-string">'two'</span>,<span class="hljs-string">'three'</span>)) <span class="hljs-comment"># result 'one,two'</span><br></code></pre></td></tr></table></figure><p>Keep decimal of the float</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">c= <span class="hljs-number">12.3333333</span><br>print(<span class="hljs-string">"keep 2 decimal : &#123;&#125;"</span>.format(round(c,<span class="hljs-number">2</span>)))<br>print(<span class="hljs-string">"keep 2 decimal : &#123;:.2f&#125;"</span>.format(c))<br></code></pre></td></tr></table></figure><p>Python Escape character</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">print(<span class="hljs-string">'Ru\noob'</span>)<br>print(<span class="hljs-string">r'Ru\noob'</span>)<br>print(<span class="hljs-string">r'Ru\'n\"oob'</span>)<br></code></pre></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">result</span>:<span class="hljs-string"></span><br><span class="hljs-attr">Ru</span> <span class="hljs-string"></span><br><span class="hljs-attr">oob</span><br><span class="hljs-attr">Ru\noob</span> <span class="hljs-string"></span><br><span class="hljs-attr">Ru\'n\"oob</span><br></code></pre></td></tr></table></figure><h1 id="Python-Sort"><a href="#Python-Sort" class="headerlink" title="Python Sort()"></a>Python Sort()</h1><p>a lot of things can learn about sort</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">sorted(list1,reverse=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><h1 id="Python-File-I-O"><a href="#Python-File-I-O" class="headerlink" title="Python File I/O"></a>Python File I/O</h1><p>To skip file header</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">file.readline()<br></code></pre></td></tr></table></figure><h1 id="Logic-Operators"><a href="#Logic-Operators" class="headerlink" title="Logic Operators"></a>Logic Operators</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">x,y,z = <span class="hljs-number">1</span>,<span class="hljs-number">4</span>,<span class="hljs-number">14</span><br>print(x&lt;=<span class="hljs-number">1</span> <span class="hljs-keyword">or</span> y&gt;<span class="hljs-number">1</span> <span class="hljs-keyword">and</span> z&lt;<span class="hljs-number">1</span>) <br><span class="hljs-comment"># result is true, T or T and F -&gt; T or (T and F) -&gt; T or F -&gt; T</span><br></code></pre></td></tr></table></figure><h1 id="Swap-values"><a href="#Swap-values" class="headerlink" title="Swap values"></a>Swap values</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#s1 (1 temp variables)</span><br>time, velocity = <span class="hljs-number">5</span>,<span class="hljs-number">3</span><br>temp = time<br>time = velocity<br>velocity = temp<br>print(time,velocity)<br><span class="hljs-comment">#s2 (2 temp variables)</span><br>time, velocity = <span class="hljs-number">5</span>,<span class="hljs-number">3</span><br>time, velocity = velocity,time<br>print(time,velocity)<br><span class="hljs-comment">#s3 (not recommend)</span><br>time, velocity = <span class="hljs-number">5</span>,<span class="hljs-number">3</span><br>time = time + velocity<br>velocity = time - velocity<br>time = time - velocity<br>print(time,velocity)<br></code></pre></td></tr></table></figure><h1 id="Python-Class"><a href="#Python-Class" class="headerlink" title="Python Class"></a>Python Class</h1><ol><li><strong>init</strong>方法的第一参数永远是self，表示创建的类实例本身，<br>因此，在<strong>init</strong>方法内部，就可以把各种属性绑定到self，<br>因为self就指向创建的实例本身。</li><li>有了<strong>init</strong>方法，在创建实例的时候，就不能传入空的参数了，<br>必须传入与<strong>init</strong>方法匹配的参数，但self不需要传，Python解释器会自己把实例变量传进去。</li><li>另外，这里self就是指类本身，self.name就是Student类的属性变量，是Student类所有。而name是外部传来的参数，不是Student类所自带的。故, self.name = name的意思就是把外部传来的参数name的值赋值给Student类自己的属性变量self.name。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Product</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, code, name, price)</span>:</span> <br>        self.code = code<br>        self.name = name<br>        self.price = price<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">calculate_gst</span><span class="hljs-params">(self)</span>:</span><br>        <span class="hljs-keyword">return</span> self.price * <span class="hljs-number">0.07</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__repr__</span><span class="hljs-params">(self)</span>:</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">"Product('&#123;&#125;', '&#123;&#125;',&#123;:.2f&#125;)"</span>.format(self.code, self.name, self.price)<br></code></pre></td></tr></table></figure></li><li>self代表类的实例，而非类。</li><li>self可以不写吗?<ol><li>编写类中的函数时，不写self会报错。<br><br>如下面这个最简单的类可以正常运行的，如果删除def prt(self)中的self,就会报“TypeError: enten88() takes no arguments (1 given)”的错误。这其实与class中函数调用的方式有关，在给出一个实例以后，我们调用类中的具体方法（即函数）时，默认传入了self参数（即实例地址），如上面的实例，我们在定义函数时没有给他形参，那么调用时自动传入的第一个参数self无处容纳，即参数多余，报错.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span><span class="hljs-params">(object)</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">prt</span><span class="hljs-params">(self)</span>:</span><br>        <span class="hljs-keyword">print</span> <span class="hljs-string">"this is test"</span><br><br>b = Test()<br>b.prt()<br></code></pre></td></tr></table></figure>==<strong>类方法必须包含参数 self, 且为第一个参数</strong>==</li></ol></li></ol><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DerivedClassName</span><span class="hljs-params">(BaseClassName1)</span>:</span><br>    &lt;statement<span class="hljs-number">-1</span>&gt;<br>    .<br>    .<br>    .<br>    &lt;statement-N&gt;<br></code></pre></td></tr></table></figure><p>需要注意圆括号中基类的顺序，若是基类中有相同的方法名，而在子类使用时未指定，python从左至右搜索. 即方法在子类中未找到时，从左到右查找基类中是否包含方法.</p><p>BaseClassName（示例中的基类名）必须与派生类==定义在一个作用域内==。除了类，还可以用表达式，基类定义在另一个模块中时这一点非常有用:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DerivedClassName</span><span class="hljs-params">(modname.BaseClassName)</span>:</span><br></code></pre></td></tr></table></figure><p>Sample</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#类定义</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">people</span>:</span><br>    <span class="hljs-comment">#定义基本属性</span><br>    name = <span class="hljs-string">''</span><br>    age = <span class="hljs-number">0</span><br>    <span class="hljs-comment">#定义私有属性,私有属性在类外部无法直接进行访问</span><br>    __weight = <span class="hljs-number">0</span><br>    <span class="hljs-comment">#定义构造方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self,n,a,w)</span>:</span><br>        self.name = n<br>        self.age = a<br>        self.__weight = w<br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">speak</span><span class="hljs-params">(self)</span>:</span><br>        print(<span class="hljs-string">"%s 说: 我 %d 岁。"</span> %(self.name,self.age))<br> <br><span class="hljs-comment">#单继承示例</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">student</span><span class="hljs-params">(people)</span>:</span><br>    grade = <span class="hljs-string">''</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self,n,a,w,g)</span>:</span><br>        <span class="hljs-comment">#调用父类的构函</span><br>        people.__init__(self,n,a,w)<br>        self.grade = g<br>    <span class="hljs-comment">#覆写父类的方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">speak</span><span class="hljs-params">(self)</span>:</span><br>        print(<span class="hljs-string">"%s 说: 我 %d 岁了，我在读 %d 年级"</span>%(self.name,self.age,self.grade))<br> <br> <br> <br>s = student(<span class="hljs-string">'ken'</span>,<span class="hljs-number">10</span>,<span class="hljs-number">60</span>,<span class="hljs-number">3</span>)<br>s.speak()<br><br><span class="hljs-comment"># ken 说: 我 10 岁了，我在读 3 年级</span><br></code></pre></td></tr></table></figure><h3 id="多继承"><a href="#多继承" class="headerlink" title="多继承"></a>多继承</h3><p>需要注意圆括号中父类的顺序，若是父类中有相同的方法名，而在子类使用时未指定，python从左至右搜索 即方法在子类中未找到时，从左到右查找父类中是否包含方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#类定义</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">people</span>:</span><br>    <span class="hljs-comment">#定义基本属性</span><br>    name = <span class="hljs-string">''</span><br>    age = <span class="hljs-number">0</span><br>    <span class="hljs-comment">#定义私有属性,私有属性在类外部无法直接进行访问</span><br>    __weight = <span class="hljs-number">0</span><br>    <span class="hljs-comment">#定义构造方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self,n,a,w)</span>:</span><br>        self.name = n<br>        self.age = a<br>        self.__weight = w<br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">speak</span><span class="hljs-params">(self)</span>:</span><br>        print(<span class="hljs-string">"%s 说: 我 %d 岁。"</span> %(self.name,self.age))<br> <br><span class="hljs-comment">#单继承示例</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">student</span><span class="hljs-params">(people)</span>:</span><br>    grade = <span class="hljs-string">''</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self,n,a,w,g)</span>:</span><br>        <span class="hljs-comment">#调用父类的构函</span><br>        people.__init__(self,n,a,w)<br>        self.grade = g<br>    <span class="hljs-comment">#覆写父类的方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">speak</span><span class="hljs-params">(self)</span>:</span><br>        print(<span class="hljs-string">"%s 说: 我 %d 岁了，我在读 %d 年级"</span>%(self.name,self.age,self.grade))<br> <br><span class="hljs-comment">#另一个类，多重继承之前的准备</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">speaker</span><span class="hljs-params">()</span>:</span><br>    topic = <span class="hljs-string">''</span><br>    name = <span class="hljs-string">''</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self,n,t)</span>:</span><br>        self.name = n<br>        self.topic = t<br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">speak</span><span class="hljs-params">(self)</span>:</span><br>        print(<span class="hljs-string">"我叫 %s，我是一个演说家，我演讲的主题是 %s"</span>%(self.name,self.topic))<br> <br><span class="hljs-comment">#多重继承</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">sample</span><span class="hljs-params">(speaker,student)</span>:</span><br>    a =<span class="hljs-string">''</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self,n,a,w,g,t)</span>:</span><br>        student.__init__(self,n,a,w,g)<br>        speaker.__init__(self,n,t)<br> <br>test = sample(<span class="hljs-string">"Tim"</span>,<span class="hljs-number">25</span>,<span class="hljs-number">80</span>,<span class="hljs-number">4</span>,<span class="hljs-string">"Python"</span>)<br>test.speak()   <span class="hljs-comment">#方法名同，默认调用的是在括号中排前地父类的方法</span><br><br><span class="hljs-comment"># 我叫 Tim，我是一个演说家，我演讲的主题是 Python</span><br></code></pre></td></tr></table></figure><h2 id="类属性与方法"><a href="#类属性与方法" class="headerlink" title="类属性与方法"></a>类属性与方法</h2><h3 id="类的私有属性"><a href="#类的私有属性" class="headerlink" title="类的私有属性"></a>类的私有属性</h3><p><strong>private_attrs：两个下划线开头，声明该属性为私有，不能在类的外部被使用或直接访问。在类内部的方法中使用时 self.</strong>private_attrs。</p><h3 id="类的方法"><a href="#类的方法" class="headerlink" title="类的方法"></a>类的方法</h3><p>在类的内部，使用 def 关键字来定义一个方法，与一般函数定义不同，类方法必须包含参数 self，且为第一个参数，self 代表的是类的实例。</p><p>self 的名字并不是规定死的，也可以使用 this，但是最好还是按照约定是用 self。</p><h3 id="类的私有方法"><a href="#类的私有方法" class="headerlink" title="类的私有方法"></a>类的私有方法</h3><p><strong>private_method：两个下划线开头，声明该方法为私有方法，只能在类的内部调用 ，不能在类的外部调用。self.</strong>private_methods。</p><h2 id="类的专有方法"><a href="#类的专有方法" class="headerlink" title="类的专有方法"></a>类的专有方法</h2><ul><li>__init__ : 构造函数，在生成对象时调用</li><li>__del__ : 析构函数，释放对象时使用</li><li>__repr__ : 打印，转换</li><li>__setitem__ : 按照索引赋值</li><li>__getitem__: 按照索引获取值</li><li>__len__: 获得长度</li><li>__cmp__: 比较运算</li><li>__call__: 函数调用</li><li>__add__: 加运算</li><li>__sub__: 减运算</li><li>__mul__: 乘运算</li><li>__truediv__: 除运算</li><li>__mod__: 求余运算</li><li>__pow__: 乘方</li></ul><h2 id="Python3-中类的静态方法、普通方法、类方法"><a href="#Python3-中类的静态方法、普通方法、类方法" class="headerlink" title="Python3 中类的静态方法、普通方法、类方法"></a>Python3 中类的静态方法、普通方法、类方法</h2><p><strong>静态方法</strong>: 用 @staticmethod 装饰的不带 self 参数的方法叫做静态方法，类的静态方法可以没有参数，可以直接使用类名调用。</p><p><strong>普通方法</strong>: 默认有个self参数，且只能被对象调用。</p><p><strong>类方法</strong>: 默认有个 cls 参数，可以被类和对象调用，需要加上 @classmethod 装饰器。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Classname</span>:</span><br><span class="hljs-meta">    @staticmethod</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">fun</span><span class="hljs-params">()</span>:</span><br>        print(<span class="hljs-string">'静态方法'</span>)<br><br><span class="hljs-meta">    @classmethod</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">a</span><span class="hljs-params">(cls)</span>:</span><br>        print(<span class="hljs-string">'类方法'</span>)<br><br>    <span class="hljs-comment"># 普通方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">b</span><span class="hljs-params">(self)</span>:</span><br>        print(<span class="hljs-string">'普通方法'</span>)<br><br><br><br>Classname.fun()<br>Classname.a()<br><br>C = Classname()<br>C.fun()<br>C.a()<br>C.b()<br></code></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Python-Integers&quot;&gt;&lt;a href=&quot;#Python-Integers&quot; class=&quot;headerlink&quot; title=&quot;Python Integers&quot;&gt;&lt;/a&gt;Python Integers&lt;/h1&gt;&lt;p&gt;Python integer don
      
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Cheat Sheet</title>
    <link href="http://yoursite.com/2020/05/19/CheatSheet/"/>
    <id>http://yoursite.com/2020/05/19/CheatSheet/</id>
    <published>2020-05-19T13:34:31.000Z</published>
    <updated>2020-05-21T04:07:56.796Z</updated>
    
    <content type="html"><![CDATA[<h1 id="在文件中查找字符串"><a href="#在文件中查找字符串" class="headerlink" title="在文件中查找字符串"></a>在文件中查找字符串</h1><h2 id="find"><a href="#find" class="headerlink" title="find"></a>find</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs markdown">C:\Users\&gt;find /?<br>在文件中搜索字符串。<br><br>FIND [<span class="hljs-string">/V</span>] [<span class="hljs-string">/C</span>] [<span class="hljs-string">/N</span>] [<span class="hljs-string">/I</span>] [<span class="hljs-string">/OFF[LINE</span>]] "string" [<span class="hljs-string">[drive:</span>][<span class="hljs-symbol">path</span>]filename[ ...]]<br><br>  /V         显示所有未包含指定字符串的行。<br>  /C         仅显示包含字符串的行数。<br>  /N         显示行号。<br>  /I         搜索字符串时忽略大小写。<br>  /OFF[LINE] 不要跳过具有脱机属性集的文件。<br>  "string" 指定要搜索的文本字符串。<br>  [<span class="hljs-string">drive:</span>][<span class="hljs-symbol">path</span>]filename 指定要搜索的文件。<br><br> /?          在命令提示符显示帮助。<br></code></pre></td></tr></table></figure><p>例如：<br>要从Pencil.ad 显示包含字符串“Pencil Sharpener”的所有行，请键入：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-builtin-name">find</span> <span class="hljs-string">"Pencil Sharpener"</span> pencil.ad<br></code></pre></td></tr></table></figure><p>比如在D盘根目录下的文本文件test.txt中查找含有 abcd这一字符串的所有行。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-builtin-name">find</span> <span class="hljs-string">"abcd"</span> d:\test.txt<br></code></pre></td></tr></table></figure><h2 id="findstr"><a href="#findstr" class="headerlink" title="findstr"></a>findstr</h2><p>假设您想要找到当前目录和所有子目录中每个包含“computer”这个单词的文件，而不考虑字母的大小写。要列出包含单词“computer”的所有文件，请键入</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">findstr <span class="hljs-string">/s</span> <span class="hljs-string">/i</span> <span class="hljs-string">/m</span> <span class="hljs-string">"\&lt;computer\&gt;"</span> *.*<br></code></pre></td></tr></table></figure><p>当你不知道在哪一个具体的文件中搜索指定字符串的时候，一般命令的格式是这样的：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">findstr <span class="hljs-string">/s</span> <span class="hljs-string">/i</span> <span class="hljs-string">/n</span>  <span class="hljs-string">"abc"</span>  *.*<br></code></pre></td></tr></table></figure><p>意思就是（/s）–&gt;在当前目录及其子目录中的 (<em>.</em>) —&gt;所有格式文件 中搜索含有字符串abc的行 (/i)–&gt;搜索忽略字符串中字母的大小写 (/n)–&gt;并显示改行的行号。</p><h1 id="Remote-Debugging-with-Eclipse-WebSphere-7"><a href="#Remote-Debugging-with-Eclipse-WebSphere-7" class="headerlink" title="Remote Debugging with Eclipse + WebSphere 7"></a>Remote Debugging with Eclipse + WebSphere 7</h1><p><a href="https://mkyong.com/websphere/remote-debugging-with-eclipse-websphere-7/" target="_blank" rel="noopener">https://mkyong.com/websphere/remote-debugging-with-eclipse-websphere-7/</a></p><h1 id="破解工作表加密"><a href="#破解工作表加密" class="headerlink" title="破解工作表加密"></a>破解工作表加密</h1><p><a href="https://zhuanlan.zhihu.com/p/26440785" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/26440785</a></p><h1 id="Json-Formatter"><a href="#Json-Formatter" class="headerlink" title="Json Formatter"></a>Json Formatter</h1><p><a href="https://jsonformatter.org/" target="_blank" rel="noopener">https://jsonformatter.org/</a></p><h1 id="MacOS-软件下载"><a href="#MacOS-软件下载" class="headerlink" title="MacOS 软件下载"></a>MacOS 软件下载</h1><p><a href="https://xclient.info/" target="_blank" rel="noopener">https://xclient.info/</a></p><h1 id="重启Win10电脑打印机服务"><a href="#重启Win10电脑打印机服务" class="headerlink" title="重启Win10电脑打印机服务"></a>重启Win10电脑打印机服务</h1><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dos"><span class="hljs-built_in">net</span> stop spooler<br><br><span class="hljs-built_in">net</span> <span class="hljs-built_in">start</span> spooler<br></code></pre></td></tr></table></figure><h1 id="海量电脑桌面-可选分辨率"><a href="#海量电脑桌面-可选分辨率" class="headerlink" title="海量电脑桌面(可选分辨率)"></a>海量电脑桌面(可选分辨率)</h1><p><a href="https://alphacoders.com/" target="_blank" rel="noopener">https://alphacoders.com/</a></p><p><a href="https://www.wallpaperflare.com/" target="_blank" rel="noopener">https://www.wallpaperflare.com/</a></p><h1 id="无水印高清图"><a href="#无水印高清图" class="headerlink" title="无水印高清图"></a>无水印高清图</h1><p><a href="https://unsplash.com/t/textures-patterns" target="_blank" rel="noopener">https://unsplash.com/t/textures-patterns</a></p><h1 id="好用API合集网站"><a href="#好用API合集网站" class="headerlink" title="好用API合集网站"></a>好用API合集网站</h1><p><a href="https://api.btstu.cn/" target="_blank" rel="noopener">https://api.btstu.cn/</a></p><h1 id="API随机图片"><a href="#API随机图片" class="headerlink" title="API随机图片"></a>API随机图片</h1><p><a href="https://source.unsplash.com/" target="_blank" rel="noopener">https://source.unsplash.com/</a></p><h1 id="通过链接下载视频"><a href="#通过链接下载视频" class="headerlink" title="通过链接下载视频"></a>通过链接下载视频</h1><p><a href="https://www.urlgot.com/" target="_blank" rel="noopener">https://www.urlgot.com/</a></p><h1 id="eclipse解决egit-lock-fail-fetch时"><a href="#eclipse解决egit-lock-fail-fetch时" class="headerlink" title="eclipse解决egit lock fail(fetch时)"></a>eclipse解决egit lock fail(fetch时)</h1><p><a href="https://stackoverflow.com/questions/49859734/egit-lock-fail-eclipse/51058122" target="_blank" rel="noopener">https://stackoverflow.com/questions/49859734/egit-lock-fail-eclipse/51058122</a></p><h1 id="微信朋友圈生成器"><a href="#微信朋友圈生成器" class="headerlink" title="微信朋友圈生成器"></a>微信朋友圈生成器</h1><p><a href="https://www.chatfaker.com/zh-cn/index.html#home" target="_blank" rel="noopener">https://www.chatfaker.com/zh-cn/index.html#home</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;在文件中查找字符串&quot;&gt;&lt;a href=&quot;#在文件中查找字符串&quot; class=&quot;headerlink&quot; title=&quot;在文件中查找字符串&quot;&gt;&lt;/a&gt;在文件中查找字符串&lt;/h1&gt;&lt;h2 id=&quot;find&quot;&gt;&lt;a href=&quot;#find&quot; class=&quot;headerli
      
    
    </summary>
    
    
      <category term="Cheat" scheme="http://yoursite.com/categories/Cheat/"/>
    
    
      <category term="Cheat" scheme="http://yoursite.com/tags/Cheat/"/>
    
  </entry>
  
  <entry>
    <title>Docker与持续集成</title>
    <link href="http://yoursite.com/2020/05/07/Docker%E4%B8%8E%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/"/>
    <id>http://yoursite.com/2020/05/07/Docker%E4%B8%8E%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/</id>
    <published>2020-05-06T16:00:00.000Z</published>
    <updated>2020-05-07T14:35:19.773Z</updated>
    
    <content type="html"><![CDATA[<p>持续集成和自动部署的原理如下图所示：<br><img src="https://s1.ax1x.com/2020/05/07/Ye7HXQ.png" alt=""></p><ol><li>RD推送代码到git 仓库或者svn等代码服务器上面，git服务器就会通过hook通知jenkins。</li><li>jenkine 克隆git代码到本地，并通过dockerFile文件进行编译 。</li><li>打包生成一个新版本的镜像并推送到仓库 ，删除当前容器 ，通过新版本镜像重新运行。</li><li>而在整个过程中 RD只需要敲入三个命令Git add * ;Git commit –m “”;Git push即可完成持续集成、自动交付、自动部署。</li></ol><p>Docker还可以很方便的自动扩容哦，一般的自动扩容的两种方式，一种就是docker容量扩大，另一种就是docker节点数扩充。第一种就修改配置文件即可，第二种通过简单的拷贝，运行就完成了节点的扩容。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;持续集成和自动部署的原理如下图所示：&lt;br&gt;&lt;img src=&quot;https://s1.ax1x.com/2020/05/07/Ye7HXQ.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;RD推送代码到git 仓库或者svn等代码服务器上面，git服务器就会通过hook
      
    
    </summary>
    
    
      <category term="Learn" scheme="http://yoursite.com/categories/Learn/"/>
    
    
      <category term="Docker" scheme="http://yoursite.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Docker概念梳理</title>
    <link href="http://yoursite.com/2020/05/07/Docker%E6%A6%82%E5%BF%B5%E6%A2%B3%E7%90%86/"/>
    <id>http://yoursite.com/2020/05/07/Docker%E6%A6%82%E5%BF%B5%E6%A2%B3%E7%90%86/</id>
    <published>2020-05-06T16:00:00.000Z</published>
    <updated>2020-05-08T12:06:27.695Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Docker好处"><a href="#Docker好处" class="headerlink" title="Docker好处:"></a>Docker好处:</h3><ul><li><strong>一致的运行环境</strong> Docker 的镜像提供了==除内核外==完整的运行时环境，确保了应用运行环境一致性.</li><li><strong>更快速的启动时间</strong> 可以做到秒级、甚至毫秒级的启动时间。</li><li><strong>隔离性</strong> 避免公用的服务器，资源会容易受到其他用户的影响.</li><li><strong>弹性伸缩，快速扩展</strong> 善于处理集中爆发的服务器使用压力.</li><li><strong>迁移方便</strong> 可以很轻易的将在一个平台上运行的应用，迁移到另一个平台上，而不用担心运行环境的变化导致应用无法正常运行的情况。</li><li><strong>持续交付和部署</strong> 使用 Docker 可以通过定制应用镜像来实现持续集成、持续交付、部署。</li></ul><h3 id="Docker基本概念"><a href="#Docker基本概念" class="headerlink" title="Docker基本概念"></a>Docker基本概念</h3><ul><li><a href="#Repository">仓库</a>（Repository）</li><li><a href="#Image">镜像</a>（Image）</li><li><a href="#Container">容器</a>（Container）</li><li><a href="#Dockerfile">Dockerfile</a>（Dockerfile）</li><li><a href="#DockerCompose">Docker Compose</a>（Docker Compose）</li></ul><p><img src="https://s1.ax1x.com/2020/05/07/Yeowu9.jpg" alt=""></p><h4 id="仓库"><a href="#仓库" class="headerlink" title="仓库"></a><span id = "Repository">仓库</span></h4><p>集中存放镜像文件的地方。比如：DockerHub</p><h4 id="镜像"><a href="#镜像" class="headerlink" title="镜像"></a><span id = "Image">镜像</span></h4><p>一个特殊的文件系统，除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数（如匿名卷、环境变量、用户等）。 镜像不包含任何动态数据，其内容在构建之后也不会被改变。</p><p>镜像构建时，会一层层构建，前一层是后一层的基础。每一层构建完就不会再发生改变，后一层上的任何改变只发生在自己这一层。</p><p>有基础镜像，仅仅包含操作系统，比如centos镜像；有中间件镜像，比如redis等数据库镜像；最后是应用镜像，就是指具体的应用服务了，应用镜像可以非常丰富，随时可以发布，这三者之间依次叠加。</p><h4 id="容器"><a href="#容器" class="headerlink" title="容器"></a><span id = "Container">容器</span></h4><p>镜像（Image）和容器（Container）的关系，就像是面向对象程序设计中的 类 和 实例 一样，镜像是静态的定义，容器是镜像运行时的实体。</p><p>容器存储层的生存周期和容器一样，容器消亡时，容器存储层也随之消亡。因此，任何保存于容器存储层的信息都会随容器删除而丢失。</p><p>容器不应该向其存储层内写入任何数据，容器存储层要保持无状态化。所有的文件写入操作，都应该使用数据卷（Volume）、或者绑定宿主目录，在这些位置的读写会跳过容器存储层，直接对宿主(或网络存储)发生读写，其性能和稳定性更高。数据卷的生存周期独立于容器，容器消亡，数据卷不会消亡。因此，使用数据卷后，容器可以随意删除、重新 run ，数据却不会丢失。</p><p>打个比方，你首先下载了一个Ubuntu的镜像，然后又安装mysql和Django应用及其依赖，来完成对它Ubutun镜像的修改，一个个人觉得非常完美应用镜像生成了！就把这个镜像分享给大家使用，大家通过这个镜像就生成一个容器。容器启动之后就会运行Django服务了。<br><img src="https://s1.ax1x.com/2020/05/07/YeTFv4.png" alt=""></p><p>容器就是一个个独立的封闭的集装箱，但是也需要对外提供服务的，所以Docker允许公开容器的特定端口，在启动Docker的时候，我们就可以将容器的特定端口映射到宿主机上面的任意一个端口，所以，如果几个服务都需要80端口，那么容器的对外端口是80，但是映射到宿主机上面就是任意端口，就不会产生冲突，所以就不需要通过代理来解决冲突。容器对外端口与宿主机的端口映射可以通过下面的命令来完成。</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs applescript">docker <span class="hljs-built_in">run</span> -d -p <span class="hljs-number">8081</span>:<span class="hljs-number">80</span> <span class="hljs-comment">--name 容器名 镜像名</span><br><br> -d 守护容器，就是后台运行，退出命令窗口容器也不会停止<br> -<span class="hljs-keyword">it</span> 交互式容器 退出命令窗口容器就停止运行了<br> -p 宿主机端口和容器端口映射<br></code></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2020/05/07/YeTM8O.png" alt=""></p><h4 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a><span id = "Dockerfile">Dockerfile</span></h4><p>一个文本文件，用来配置 image。</p><figure class="highlight Docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Docker"><span class="hljs-comment"># Dockerfile</span><br><br><span class="hljs-keyword">FROM</span> ubuntu:<span class="hljs-number">16.04</span><br><br><span class="hljs-keyword">RUN</span><span class="bash"> apt-get update</span><br><br><span class="hljs-keyword">RUN</span><span class="bash"> apt-get install -y vim</span><br><br><span class="hljs-comment"># 告诉Docker默认启动命令</span><br><span class="hljs-keyword">CMD</span><span class="bash">[<span class="hljs-string">"sh"</span>]</span><br></code></pre></td></tr></table></figure><h4 id="Docker-Compose"><a href="#Docker-Compose" class="headerlink" title="Docker Compose"></a><span id = "DockerCompose">Docker Compose</span></h4><p>Compose 是用于定义和运行多容器 Docker 应用程序的工具。通过 Compose，您可以使用 YML 文件来配置应用程序需要的所有服务。然后，使用一个命令，就可以从 YML 文件配置中创建并启动所有服务。</p><p>docker-compose是编排容器的。例如，你有一个php镜像，一个mysql镜像，一个nginx镜像。如果没有docker-compose，那么每次启动的时候，你需要敲各个容器的启动参数，环境变量，容器命名，指定不同容器的链接参数等等一系列的操作，相当繁琐。而用了docker-composer之后，你就可以把这些命令一次性写在docker-composer.yml文件中，以后每次启动这一整个环境（含3个容器）的时候，你只要敲一个docker-composer up命令就ok了</p><p>Compose 使用的三个步骤：</p><ol><li>使用 Dockerfile 定义应用程序的环境。</li><li>使用 docker-compose.yml 定义构成应用程序的服务，这样它们可以在隔离环境中一起运行。</li><li>最后，执行 docker-compose up 命令来启动并运行整个应用程序。</li></ol><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-meta"># yaml 配置实例</span><br><span class="hljs-symbol">version:</span> <span class="hljs-string">'3'</span><br><span class="hljs-symbol">services:</span><br><span class="hljs-symbol">  web:</span><br><span class="hljs-symbol">    build:</span> .<br><span class="hljs-symbol">    ports:</span><br>   - <span class="hljs-string">"5000:5000"</span><br><span class="hljs-symbol">    volumes:</span><br>   - .:/code<br>    - logvolume01:<span class="hljs-meta-keyword">/var/</span>log<br><span class="hljs-symbol">    links:</span><br>   - redis<br><span class="hljs-symbol">  redis:</span><br><span class="hljs-symbol">    image:</span> redis<br><span class="hljs-symbol">volumes:</span><br><span class="hljs-symbol">  logvolume01:</span> &#123;&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Docker好处&quot;&gt;&lt;a href=&quot;#Docker好处&quot; class=&quot;headerlink&quot; title=&quot;Docker好处:&quot;&gt;&lt;/a&gt;Docker好处:&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;一致的运行环境&lt;/strong&gt; Docker 的镜像提供了
      
    
    </summary>
    
    
      <category term="Learn" scheme="http://yoursite.com/categories/Learn/"/>
    
    
      <category term="Docker" scheme="http://yoursite.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Workaround for oracle weblogic install error —— Cyclic dependency detected among featureset libraries</title>
    <link href="http://yoursite.com/2020/02/03/Workaround%20for%20oracle%20weblogic%20install%20error/"/>
    <id>http://yoursite.com/2020/02/03/Workaround%20for%20oracle%20weblogic%20install%20error/</id>
    <published>2020-02-03T03:26:38.000Z</published>
    <updated>2020-05-08T16:26:44.690Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Brief"><a href="#Brief" class="headerlink" title="Brief"></a>Brief</h3><p>This is the workaround for resolving errors during weblogic installation, below are details and resolving steps.</p><h3 id="1-Problem-description"><a href="#1-Problem-description" class="headerlink" title="1. Problem description"></a>1. Problem description</h3><p>When installing weblogic 12.2.1.4, we may facing the problem during progress ‘Generating Libraries’.</p><p><img src="https://s2.ax1x.com/2020/02/03/1NfFh9.png" alt=""></p><p>The error message is </p><blockquote><p>java.lang.Exception: oracle.sysman.oii.oiif.oiifb.OiifbEndIterateException:<br>com.oracle.cie.gdr.libraries.LibraryHandlerException:<br>Cyclic dependency detected among featureset libraries:<br>[C:\Oracle\Middleware\Oracle_Home\server\lib\wljmsclient.jar,<br>C:\Oracle\Middleware\Oracle_Home\server\lib\wljmxclient.jar]</p></blockquote><h3 id="2-Resolving-steps"><a href="#2-Resolving-steps" class="headerlink" title="2. Resolving steps"></a>2. Resolving steps</h3><blockquote><p>This workaround is a <strong><em>Trick</em></strong> to skip Cyclic dependency check for ‘wljmsclient.jar’ and ‘wljmxclient.jar’, after the installation completed, add back these two libraries.</p></blockquote><ol><li>Go to the install package folder.</li></ol><p><img src="https://s2.ax1x.com/2020/02/03/1Nhfqf.png" alt=""></p><ol start="2"><li>Unzip the jar file.</li></ol><p><img src="https://s2.ax1x.com/2020/02/03/1NhLMq.png" alt=""></p><ol start="3"><li>Using command line to retrieve string ‘wljmsclient.jar’, ‘wljmxclient.jar’ under the extract folder to get details about this two libraries.<figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">findstr <span class="hljs-string">/s</span> <span class="hljs-string">/i</span> <span class="hljs-string">/n</span> <span class="hljs-string">"wljmsclient.jar"</span> *.*<br><br>findstr <span class="hljs-string">/s</span> <span class="hljs-string">/i</span> <span class="hljs-string">/n</span> <span class="hljs-string">"wljmxclient.jar"</span> *.*<br></code></pre></td></tr></table></figure>We can find out that the libraries are referenced in <strong><em>wls_sharedLibraries_12.2.1.4.0.xml</em></strong> under folder <strong><em>~\Disk1\stage\featuresets</em></strong></li></ol><p><img src="https://s2.ax1x.com/2020/02/03/1NhzoF.png" alt=""></p><ol start="4"><li>Go to folder <strong><em>~\Disk1\stage\featuresets</em></strong> and find file <strong><em>wls_sharedLibraries_12.2.1.4.0.xml</em></strong></li></ol><p><img src="https://s2.ax1x.com/2020/02/03/1N4VeK.png" alt=""></p><ol start="5"><li>Open the file <strong><em>wls_sharedLibraries_12.2.1.4.0.xml</em></strong> and find lines for libraries ‘wljmsclient.jar’, ‘wljmxclient.jar’.</li></ol><p><img src="https://s2.ax1x.com/2020/02/03/1N4Jw8.png" alt=""></p><ol start="6"><li>Commented out these lines in xml and save the xml.</li></ol><p><img src="https://s2.ax1x.com/2020/02/03/1N4DO0.png" alt=""></p><ol start="7"><li>Go back to folder <strong><em>~\Disk1\install</em></strong>, run the <strong><em>.ng.cmd</em></strong> script as administrator</li></ol><p><img src="https://s2.ax1x.com/2020/02/03/1N5Jj1.png" alt=""></p><p>The installation cmd is running </p><p><img src="https://s2.ax1x.com/2020/02/03/1NIS29.png" alt=""></p><ol start="8"><li>The weblogic installer will be launched and follow the installation steps. </li></ol><p><img src="https://s2.ax1x.com/2020/02/03/1NIpvR.png" alt=""></p><ol start="9"><li>Installation completed successfully.</li></ol><p><img src="https://s2.ax1x.com/2020/02/03/1NIBZV.png" alt=""></p><ol start="10"><li>Go to the target folder, find <strong><em>wls_sharedLibraries_12.2.1.4.0.xml</em></strong> under <strong><em>~/Oracle/Middleware/Oracle_Home/inventory/featuresets</em></strong></li></ol><p><img src="https://s2.ax1x.com/2020/02/03/1NoUYD.png" alt=""></p><ol start="11"><li>Open <strong><em>wls_sharedLibraries_12.2.1.4.0.xml</em></strong> and we can find out that libraries info for ‘wljmsclient.jar’, ‘wljmxclient.jar’ are not there (Because we commnet out the code when installation).</li></ol><p><img src="https://s2.ax1x.com/2020/02/03/1Nohlj.png" alt=""></p><ol start="12"><li>Add these info back.</li></ol><p><img src="https://s2.ax1x.com/2020/02/03/1NT83Q.png" alt=""></p><ol start="13"><li>Go to  <strong><em>~/Oracle/Middleware/Oracle_Home/wlserver/server/lib</em></strong></li></ol><p><img src="https://s2.ax1x.com/2020/02/03/1NTJjs.png" alt=""></p><ol start="14"><li>Compared with <strong><em>successfully installed case</em></strong>, we can know that libraries ‘wlclient.jar’ and ‘wljmxclient.jar’ are missing due to the comment out code. Add these two libraries back to folder. </li></ol><p><img src="https://s2.ax1x.com/2020/02/03/1NTz8g.png" alt=""></p><ol start="15"><li><p>I copied these two libraries from a <strong><em>successfully installed case</em></strong>, because I installed weblogic in several machines and only some of them have this  Cyclic dependency check problem, if you don’t have these two libraries in your hands, you can get them from internet.</p><blockquote><p><a href="http://find-files.com/" target="_blank" rel="noopener">http://find-files.com/</a></p></blockquote></li><li><p><strong>Done</strong>.</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Brief&quot;&gt;&lt;a href=&quot;#Brief&quot; class=&quot;headerlink&quot; title=&quot;Brief&quot;&gt;&lt;/a&gt;Brief&lt;/h3&gt;&lt;p&gt;This is the workaround for resolving errors during weblogi
      
    
    </summary>
    
    
      <category term="workaround" scheme="http://yoursite.com/categories/workaround/"/>
    
    
      <category term="Weblogic" scheme="http://yoursite.com/tags/Weblogic/"/>
    
  </entry>
  
  <entry>
    <title>Hexo + GitPages Blog Tutorial(教程)</title>
    <link href="http://yoursite.com/2019/12/19/Hexo-GitPages-Blog-Tutorial-%E6%95%99%E7%A8%8B/"/>
    <id>http://yoursite.com/2019/12/19/Hexo-GitPages-Blog-Tutorial-%E6%95%99%E7%A8%8B/</id>
    <published>2019-12-19T14:00:22.000Z</published>
    <updated>2020-05-07T14:36:34.209Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Brief"><a href="#Brief" class="headerlink" title="Brief"></a>Brief</h2><p>This tutorial is for building free static blogs by using Hexo and Github Pages. We will start at environments set up, customise blog pages, add source project in version control and install plugins for futher features like comments.</p><h3 id="What-is-Hexo"><a href="#What-is-Hexo" class="headerlink" title="What is Hexo"></a>What is Hexo</h3><p>Hexo is a fast, simple and powerful blog framework. You write posts in <a href="https://en.wikipedia.org/wiki/Markdown" target="_blank" rel="noopener">Markdown</a> (or other markup languages) and <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a> generates static files with a beautiful theme in seconds.</p><h3 id="What-is-Github-Pages"><a href="#What-is-Github-Pages" class="headerlink" title="What is Github Pages"></a>What is Github Pages</h3><p><a href="https://en.wikipedia.org/wiki/GitHub#GitHub_Pages" target="_blank" rel="noopener">GitHub Pages</a> is a static web hosting service offered by GitHub since 2008 to GitHub users for hosting user blogs, project documentation, or even whole books created as a page.</p><h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><p>It only takes less than one hour to set up enviroments and get your first blog page deployed. If you encounter a problem, please refer <a href="https://hexo.io/docs/" target="_blank" rel="noopener">https://hexo.io/docs/</a></p><h3 id="Requirements"><a href="#Requirements" class="headerlink" title="Requirements"></a>Requirements</h3><ul><li>Git</li><li>Node.js</li></ul><p>If your computer already has these, congratulations! You can skip to the <a href="#installHexo">install Hexo</a> step.</p><h3 id="Install-Git"><a href="#Install-Git" class="headerlink" title="Install Git"></a>Install Git</h3><ul><li>Windows: Download &amp; install <a href="https://git-scm.com/download/win" target="_blank" rel="noopener">git</a>.</li><li>Mac: Install it with <a href="https://brew.sh/" target="_blank" rel="noopener">Homebrew</a>, <a href="http://www.macports.org/" target="_blank" rel="noopener">MacPorts</a> or <a href="http://www.macports.org/" target="_blank" rel="noopener">installer</a>.</li><li>Linux (Ubuntu, Debian):<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">sudo apt-<span class="hljs-builtin-name">get</span> install git-core<br></code></pre></td></tr></table></figure></li><li>Linux (Fedora, Red Hat, CentOS):<figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">sudo yum <span class="hljs-keyword">install</span> git-core<br></code></pre></td></tr></table></figure></li></ul><p>Run CMD check git was installed successfully: <code>git --version</code></p><p><img src="https://s2.ax1x.com/2019/12/19/QquIcd.png" alt=""></p><h3 id="Generate-SSH-Key-for-Github"><a href="#Generate-SSH-Key-for-Github" class="headerlink" title="Generate SSH Key for Github"></a>Generate SSH Key for Github</h3><p>Run git bash from Menu</p><p><img src="https://s2.ax1x.com/2019/12/19/QLZN9J.png" alt=""></p><p>Config your git global settings:</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">git<span class="hljs-built_in"> config </span>--global user.name <span class="hljs-string">"your GitHub username"</span><br>git<span class="hljs-built_in"> config </span>--global user.email <span class="hljs-string">"your GitHub regist email"</span><br></code></pre></td></tr></table></figure><p>Generate ssh key:</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs excel">ssh-keygen -<span class="hljs-built_in">t</span> rsa -C <span class="hljs-string">"your GitHub regist email"</span><br></code></pre></td></tr></table></figure><p>Press ‘Enter’ three times, no need password by default, find id_rsa.pub key in generated .ssh folder, copy the whole content in this file.</p><p><a href="https://imgchr.com/i/QLmgOI" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/12/19/QLmgOI.md.jpg" alt=""></a></p><p>Go to github <a href="https://github.com/settings/keys" target="_blank" rel="noopener">setting keys page</a>, click New SSH Key</p><p><a href="https://imgchr.com/i/QLmNO1" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/12/19/QLmNO1.md.png" alt=""></a></p><p>Title can be any value, copy the content of id_rsa.pub into Key, then click Add SSH Key.</p><p>Go to git bash, use command <code>ssh git@github.com</code> to verify the key is successfully configured:</p><p><a href="https://imgchr.com/i/QLn64U" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/12/19/QLn64U.md.png" alt=""></a></p><h3 id="Install-Node-js"><a href="#Install-Node-js" class="headerlink" title="Install Node.js"></a>Install Node.js</h3><p>Node.js <a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">Official Installer</a></p><blockquote><h4 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h4><p>If you use the official installer, make sure Add to PATH is checked (it’s checked by default).</p></blockquote><blockquote><h4 id="Mac-Linux"><a href="#Mac-Linux" class="headerlink" title="Mac / Linux"></a>Mac / Linux</h4><p>If you encounter EACCES permission error when trying to install Hexo, please follow the <a href="https://docs.npmjs.com/resolving-eacces-permissions-errors-when-installing-packages-globally" target="_blank" rel="noopener">workaround</a> provided by npmjs; overriding with root/sudo is highly discouraged.</p></blockquote><p>Run CMD check node.js was installed successfully: <code>node -v</code></p><p><img src="https://s2.ax1x.com/2019/12/19/QqKdbt.png" alt=""></p><p>npm will be installed by default when installing node.js, if not, please install npm also.</p><p>Run CMD check npm was installed successfully: <code>npm -v</code></p><p><img src="https://s2.ax1x.com/2019/12/19/QqMFsA.png" alt=""></p><h3 id="Install-Hexo"><a href="#Install-Hexo" class="headerlink" title="Install Hexo"></a><span id="installHexo">Install Hexo</span></h3><p>Once all the requirements are installed, you can start to install Hexo.</p><ol><li>Create a folder in your local PC, we will install Hexo frame in this folder and the blog pages will also be published in this folder.</li></ol><p><img src="https://s2.ax1x.com/2019/12/19/QqQPYT.png" alt=""></p><ol start="2"><li><code>Shift + right click</code> in &lt;==MyBlog==&gt; folder. Open command window here.</li></ol><p><img src="https://s2.ax1x.com/2019/12/19/Qqa2fs.jpg" alt=""></p><p>3.Use npm command to install Hexo:</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">npm install -g hexo-<span class="hljs-keyword">cli</span><br></code></pre></td></tr></table></figure><h3 id="Init-Blog-Files"><a href="#Init-Blog-Files" class="headerlink" title="Init Blog Files"></a>Init Blog Files</h3><p>After the installation finished. Use following command in same &lt;==MyBlog==&gt; folder to init blog:</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo init blog</span><br></code></pre></td></tr></table></figure><p>Using following commands to verify the generated blog files</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">hexo</span> <span class="hljs-string">new test_my_site</span><br><br><span class="hljs-attr">hexo</span> <span class="hljs-string">g</span><br><br><span class="hljs-attr">hexo</span> <span class="hljs-string">s</span><br></code></pre></td></tr></table></figure><p><a href="https://imgchr.com/i/QLPVzV" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/12/19/QLPVzV.md.png" alt=""></a></p><p>The blog will run on local server, we can preview it on browser <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a></p><p><a href="https://imgchr.com/i/QLFFg0" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/12/19/QLFFg0.md.png" alt=""></a></p><h3 id="Create-Github-Repository"><a href="#Create-Github-Repository" class="headerlink" title="Create Github Repository"></a>Create Github Repository</h3><p>We need to create one Github Pages repository for deploying blog web files. Login github, create a new repository,</p><p><a href="https://imgchr.com/i/QLESED" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/12/19/QLESED.md.png" alt=""></a></p><p>The ==<username>== in repository name must be exactly same as highlighted your login name:</p><p><a href="https://imgchr.com/i/QLEFgI" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/12/19/QLEFgI.md.png" alt=""></a></p><p>When the repository is created, go to repository settings:</p><p><a href="https://imgchr.com/i/QLuzQJ" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/12/19/QLuzQJ.md.png" alt=""></a></p><p>Scroll down the page, config source branch abd choose a theme:</p><p><a href="https://imgchr.com/i/QLKnOA" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/12/19/QLKnOA.md.png" alt=""></a></p><p>By click the provided link, you can view your github pages in browser.</p><h3 id="Deploy-blog-to-Github-Pages"><a href="#Deploy-blog-to-Github-Pages" class="headerlink" title="Deploy blog to Github Pages"></a>Deploy blog to Github Pages</h3><p>Open the <code>_config.yml</code> file under your blog root folder, update the deploy config as follow:</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-attribute">deploy</span>:<br>  <span class="hljs-attribute">type</span>: git<br>  <span class="hljs-attribute">repository</span>: <span class="hljs-attribute">https</span>:<span class="hljs-comment">//github.com/username/username.github.io.git</span><br>  <span class="hljs-attribute">branch</span>: master<br></code></pre></td></tr></table></figure><p>Run CMD in this folder, using npm command to install deployment plugins:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">npm <span class="hljs-keyword">install</span> hexo-deployer-git <span class="hljs-comment">--save</span><br></code></pre></td></tr></table></figure><p>Then using following three hexo commands to deploy your blog on your github pages:</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">hexo</span> <span class="hljs-string">clean </span><br><span class="hljs-attr">hexo</span> <span class="hljs-string">g </span><br><span class="hljs-attr">hexo</span> <span class="hljs-string">d</span><br></code></pre></td></tr></table></figure><p>Finally, your can access your blog by url:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">username</span><span class="hljs-selector-class">.github</span><span class="hljs-selector-class">.io</span><br></code></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Brief&quot;&gt;&lt;a href=&quot;#Brief&quot; class=&quot;headerlink&quot; title=&quot;Brief&quot;&gt;&lt;/a&gt;Brief&lt;/h2&gt;&lt;p&gt;This tutorial is for building free static blogs by using H
      
    
    </summary>
    
    
      <category term="Blog" scheme="http://yoursite.com/categories/Blog/"/>
    
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
  </entry>
  
</feed>
